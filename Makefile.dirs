ifndef EXPERIMENT
# Everything above us should be guarded with env variables.
default::
	$(error "Set the EXPERIMENT variable to the experiment you want to run!")
endif

default:: raw std jit ext

################################################################################
#
# Traversal targets.
#
# These call make recursively to traverse through the directory tree.
#
################################################################################

raw		: $(addprefix raw-,$(DIRS))
raw-% 		:
	-$(MAKE) -C$* raw $(MFLAGS)

std		: $(addprefix std-,$(DIRS))
std-% 		:
	-$(MAKE) -C$* std $(MFLAGS)

jit		: $(addprefix jit-,$(DIRS))
jit-% 		:
	-$(MAKE) -C$* jit $(MFLAGS)

ext		: $(addprefix ext-,$(DIRS))
ext-% :
	-$(MAKE) -C$* ext $(MFLAGS)

caddy		: $(addprefix caddy-,$(DIRS))
caddy-% :
	-$(MAKE) -C$* caddy $(MFLAGS)

clean 	       	: $(addprefix clean-,$(DIRS))
clean-%:
	$(MAKE) -C$* clean $(MFLAGS)

profiles-clean 	: $(addprefix profiles-clean-,$(DIRS))
profiles-clean-%:
	$(MAKE) -C$* profiles-clean $(MFLAGS)

################################################################################
#
# Top-Level targets.
#
# These targets do not traverse, just generate summaries/statistics etc...
# Ideally these are hooked in the dependency chain of the recursive targets.
# However, doing so leads to a world of pain when there is one mistake in the
# execution of the experiment.
# Therefore, we disconnect them, requiring the
# user to make sure that the traversal chain worked before he calls the
# top-level targets.
#
################################################################################

# Produce a .tar.gz with the results
pkg-raw pkg-std pkg-jit pkg-ext pkg-caddy: pkg-%: $(OUTPUT)/$(TAR_F)

# Produce one big output report for further processing
# This should not get hooked into the dependency chain, this way we can
# regenerate the aggregated reports without having to run any failed tests
# again.
# FIXME: Make it work with the whole dependency chain
$(OUTDIR)/%.raw:
	$(VERB)cat $(OUTDIR)/*.$(EXPERIMENT).$* > $@

.PRECIOUS: $(OUTDIR)/raw.likwid.csv \
	   $(OUTDIR)/std.likwid.csv \
	   $(OUTDIR)/jit.likwid.csv \
	   $(OUTDIR)/ext.likwid.csv

$(OUTDIR)/%.likwid.csv:
	$(VERB)cat $(OUTDIR)/*.$(EXPERIMENT).$*.likwid > $@

# Store the CONFIG_ID variable.
$(OUTDIR)/%.id:
	echo $(CONFIG_ID) > $@

# Create a .csv report with report file provided by the EXPERIMENT
$(OUTDIR)/%.csv: $(OUTDIR)/%.raw
	$(V_REP)$(LEVEL)/GenerateReport.pl -csv \
	  $(LEVEL)/Exp.$(EXPERIMENT).report < $< > $@
	-$(VERB)sed -i 's/\.preopt//g' $@
	-$(VERB)sed -i 's/\.opt//g' $@
	-$(VERB)sed -i 's/\*/0/g' $@

# Pack all output files into a tar.gz
$(OUTPUT)/$(TAR_F): $(OUTDIR)/%.raw $(OUTDIR)/%.csv $(OUTDIR)/%.id \
  $(OUTDIR)/%.likwid.csv
	$(V_TAR)tar -z -c -f \
	  $@ $^ $(OUTDIR)/*.$(EXPERIMENT).${*}*

################################################################################
#
# Zone of doom: Lots of quick & dirty stuff. Check before use!
#
################################################################################
summary:: $(EXPERIMENT)-summary $(OUTPUT)/r.merged.csv
	$(VERB)R --slave --no-restore --no-save < pjit-r/polyjit.r

$(OUTPUT)/r.merged.csv: pjit-r/polyjit.r
	$(VERB)join $(OUTPUT)/standard.$(EXPERIMENT).csv $(OUTPUT)/jitable.$(EXPERIMENT).csv > /tmp/std.jit.csv
	$(VERB)join /tmp/std.jit.csv $(OUTPUT)/caddy.$(EXPERIMENT).csv > /tmp/std.jit.caddy.csv
	$(VERB)./reorder.awk /tmp/std.jit.caddy.csv > results/r.merged.csv

$(EXPERIMENT)-summary:: $(OUTPUT)/standard.$(EXPERIMENT).csv
$(EXPERIMENT)-summary:: $(OUTPUT)/jitable.$(EXPERIMENT).csv
$(EXPERIMENT)-summary:: $(OUTPUT)/extended.$(EXPERIMENT).csv
$(EXPERIMENT)-summary:: $(OUTPUT)/caddy.$(EXPERIMENT).csv

diagrams:: $(OUTPUT)/standard.$(EXPERIMENT).csv
diagrams:: $(OUTPUT)/jitable.$(EXPERIMENT).csv
diagrams:: $(OUTPUT)/extended.$(EXPERIMENT).csv
diagrams:: $(OUTPUT)/raw.$(EXPERIMENT).csv
diagrams::
	$(VERB)./merge.awk $(OUTPUT)/standard.$(EXPERIMENT).csv \
	  $(OUTPUT)/jitable.$(EXPERIMENT).csv \
	  $(OUTPUT)/extended.$(EXPERIMENT).csv \
	  $(OUTPUT)/raw.$(EXPERIMENT).csv > $(OUTPUT)/merged.csv
	$(VERB)R --slave --no-restore --no-save --args \
	  $(OUTPUT)/standard.$(EXPERIMENT).csv \
	  $(OUTPUT)/jitable.$(EXPERIMENT).csv \
	  $(OUTPUT)/extended.$(EXPERIMENT).csv < polyjit.r
