#!/usr/bin/env python

import argparse
import os
import regex


def print_topology(args, infile, outfile):
    for line in infile:
        outfile.write(line)

region_pattern = regex.compile('Region: (?P<name>[\w.:]+)')


def extract_region(line, region):
    m = region_pattern.search(line)
    if m:
        return m.group('name')
    return region


line_pattern = regex.compile('(?P<name>[\w\(\)\[\].: ]+),(.+)')


def extract_line_info(line):
    res = line_pattern.search(line)
    if res:
        return res.group('name'), res.group(2).split(',')
    return '', None


core_info_pattern = regex.compile('(Event|Metric|Region Info),(.+)')


def extract_core_info(line):
    res = regex.search(core_info_pattern, line)
    if res:
        return res.group(2).split(',')
    return None

run_info_separator = regex.compile(
    '-------------------------------------------------------------')


def extract_run_info(infile):
    header = []
    found = 0
    for line in infile:
        if found == 3:
            return header

        m = run_info_separator.search(line)
        if m and found < 3:
            found = found + 1
        else:
            header.append(line)

    return header


def find_first_region(infile):
    region = ''
    for line in infile:
        ri = extract_region(line, region)
        if ri != region:
            return ri
    return region

def print_perfctr(args, infile, outfile):
    region = ''
    core_info = []
    header = extract_run_info(infile)
    print header

    # Let's hope the stdout of the application does not screw us.
    region = find_first_region(infile)

    for line in infile:
        ri = extract_region(line, region)
        if ri != region:
            region = ri
            continue

        ci = extract_core_info(line)
        if ci:
            core_info = ci
            continue

        name, li = extract_line_info(line)
        if li:
            eltstr = ''
            if len(region) > 0:
                eltstr = region + ','
            for i in range(len(li)):
                outfile.write(eltstr + name + ',' +
                              core_info[i] + ',' + li[i] + '\n')


def get_outfile(infile):
    out = os.path.splitext(infile.name)[0]
    out = os.path.basename(out) + '.csv'

    return open(out, 'a')


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('infile', type=argparse.FileType('r'))
    parser.add_argument('filetype', type=str, choices=['topology', 'perfctr'])
    parser.add_argument('-o', dest='output', type=argparse.FileType('w'),
                        help='the name of the output file',
                        required=False)
    args, argv = parser.parse_known_args()

    if not args.output:
        outfile = get_outfile(args.infile)
    else:
        outfile = args.output

    if args.filetype == 'topology':
        print_topology(args, args.infile, outfile)
    elif args.filetype == 'perfctr':
        print_perfctr(args, args.infile, outfile)
    outfile.close()


if __name__ == "__main__":
    main()
