from pickle import DEFAULT_PROTOCOL as DEFAULT_PROTOCOL, HIGHEST_PROTOCOL as HIGHEST_PROTOCOL, PicklingError as PicklingError, Unpickler as StockUnpickler, UnpicklingError as UnpicklingError, _Pickler as StockPickler
from types import FunctionType, MethodType
from typing import Any, Optional

BufferType = memoryview
ClassType = type
SliceType = slice
TypeType = type
XRangeType = range
DEFAULT_PROTOCOL = HIGHEST_PROTOCOL
FileNotFoundError = IOError

class _member: ...
WrapperDescriptorType = MethodType
MethodDescriptorType = FunctionType
ClassMethodDescriptorType = FunctionType
HANDLE_FMODE: int
CONTENTS_FMODE: int
FILE_FMODE: int

def copy(obj: Any, *args: Any, **kwds: Any): ...
def dump(obj: Any, file: Any, protocol: Optional[Any] = ..., byref: Optional[Any] = ..., fmode: Optional[Any] = ..., recurse: Optional[Any] = ..., **kwds: Any) -> None: ...
def dumps(obj: Any, protocol: Optional[Any] = ..., byref: Optional[Any] = ..., fmode: Optional[Any] = ..., recurse: Optional[Any] = ..., **kwds: Any): ...
def load(file: Any, ignore: Optional[Any] = ..., **kwds: Any): ...
def loads(str: Any, ignore: Optional[Any] = ..., **kwds: Any): ...
def dump_session(filename: str = ..., main: Optional[Any] = ..., byref: bool = ..., **kwds: Any) -> None: ...
def load_session(filename: str = ..., main: Optional[Any] = ..., **kwds: Any) -> None: ...

class MetaCatchingDict(dict):
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def __missing__(self, key: Any): ...

class Pickler(StockPickler):
    dispatch: Any = ...
    def __init__(self, *args: Any, **kwds: Any) -> None: ...
    def dump(self, obj: Any) -> None: ...

class Unpickler(StockUnpickler):
    def find_class(self, module: Any, name: Any): ...
    def __init__(self, *args: Any, **kwds: Any) -> None: ...
    def load(self): ...

def pickle(t: Any, func: Any) -> None: ...
def register(t: Any): ...

class _itemgetter_helper:
    items: Any = ...
    def __init__(self) -> None: ...
    def __getitem__(self, item: Any) -> None: ...

class _attrgetter_helper:
    attrs: Any = ...
    index: Any = ...
    def __init__(self, attrs: Any, index: Optional[Any] = ...) -> None: ...
    def __getattribute__(self, attr: Any): ...

def pickles(obj: Any, exact: bool = ..., safe: bool = ..., **kwds: Any): ...
def check(obj: Any, *args: Any, **kwds: Any) -> None: ...
