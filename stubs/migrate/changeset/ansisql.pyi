from migrate import exceptions as exceptions
from migrate.changeset import util as util
from sqlalchemy.engine.default import DefaultDialect
from sqlalchemy.schema import CheckConstraint as CheckConstraint, ForeignKeyConstraint as ForeignKeyConstraint, PrimaryKeyConstraint as PrimaryKeyConstraint, SchemaVisitor, UniqueConstraint as UniqueConstraint
from sqlalchemy.sql.compiler import DDLCompiler
from typing import Any

SchemaGenerator = DDLCompiler
SchemaDropper = DDLCompiler

class AlterTableVisitor(SchemaVisitor):
    statement: Any = ...
    def append(self, s: Any) -> None: ...
    def execute(self): ...
    connection: Any = ...
    buffer: Any = ...
    preparer: Any = ...
    dialect: Any = ...
    def __init__(self, dialect: Any, connection: Any, **kw: Any) -> None: ...
    def traverse_single(self, elem: Any) -> None: ...
    def start_alter_table(self, param: Any): ...

class ANSIColumnGenerator(AlterTableVisitor, SchemaGenerator):
    def visit_column(self, column: Any) -> None: ...
    def add_foreignkey(self, fk: Any) -> None: ...

class ANSIColumnDropper(AlterTableVisitor, SchemaDropper):
    def visit_column(self, column: Any) -> None: ...

class ANSISchemaChanger(AlterTableVisitor, SchemaGenerator):
    def visit_table(self, table: Any) -> None: ...
    name: Any = ...
    def visit_index(self, index: Any): ...
    def visit_column(self, delta: Any) -> None: ...
    def start_alter_column(self, table: Any, col_name: Any) -> None: ...

class ANSIConstraintCommon(AlterTableVisitor):
    def get_constraint_name(self, cons: Any): ...
    def visit_migrate_primary_key_constraint(self, *p: Any, **k: Any) -> None: ...
    def visit_migrate_foreign_key_constraint(self, *p: Any, **k: Any) -> None: ...
    def visit_migrate_check_constraint(self, *p: Any, **k: Any) -> None: ...
    def visit_migrate_unique_constraint(self, *p: Any, **k: Any) -> None: ...

class ANSIConstraintGenerator(ANSIConstraintCommon, SchemaGenerator): ...
class ANSIConstraintDropper(ANSIConstraintCommon, SchemaDropper): ...

class ANSIDialect(DefaultDialect):
    columngenerator: Any = ...
    columndropper: Any = ...
    schemachanger: Any = ...
    constraintgenerator: Any = ...
    constraintdropper: Any = ...
