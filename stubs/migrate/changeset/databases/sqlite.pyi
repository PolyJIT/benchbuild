from copy import copy as copy
from migrate.changeset import ansisql
from typing import Any, Optional

SQLiteSchemaGenerator: Any

class SQLiteCommon: ...

class SQLiteHelper(SQLiteCommon):
    def recreate_table(self, table: Any, column: Optional[Any] = ..., delta: Optional[Any] = ..., omit_constraints: Optional[Any] = ...) -> None: ...
    def visit_column(self, delta: Any) -> None: ...

class SQLiteColumnGenerator(SQLiteSchemaGenerator, ansisql.ANSIColumnGenerator, SQLiteHelper, SQLiteCommon):
    def visit_column(self, column: Any) -> None: ...

class SQLiteColumnDropper(SQLiteHelper, ansisql.ANSIColumnDropper):
    def visit_column(self, column: Any) -> None: ...

class SQLiteSchemaChanger(SQLiteHelper, ansisql.ANSISchemaChanger):
    def visit_index(self, index: Any) -> None: ...

class SQLiteConstraintGenerator(ansisql.ANSIConstraintGenerator, SQLiteHelper, SQLiteCommon):
    def visit_migrate_primary_key_constraint(self, constraint: Any) -> None: ...
    def visit_migrate_foreign_key_constraint(self, *p: Any, **k: Any) -> None: ...
    def visit_migrate_unique_constraint(self, *p: Any, **k: Any) -> None: ...

class SQLiteConstraintDropper(ansisql.ANSIColumnDropper, SQLiteHelper, ansisql.ANSIConstraintCommon):
    def visit_migrate_primary_key_constraint(self, constraint: Any) -> None: ...
    def visit_migrate_foreign_key_constraint(self, *p: Any, **k: Any) -> None: ...
    def visit_migrate_check_constraint(self, *p: Any, **k: Any) -> None: ...
    def visit_migrate_unique_constraint(self, *p: Any, **k: Any) -> None: ...

class SQLiteDialect(ansisql.ANSIDialect):
    columngenerator: Any = ...
    columndropper: Any = ...
    schemachanger: Any = ...
    constraintgenerator: Any = ...
    constraintdropper: Any = ...
