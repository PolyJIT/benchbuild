from migrate.exceptions import *
import abc
import sqlalchemy
from UserDict import MutableMapping as DictMixin
from typing import Any, Optional

def create_column(column: Any, table: Optional[Any] = ..., *p: Any, **kw: Any): ...
def drop_column(column: Any, table: Optional[Any] = ..., *p: Any, **kw: Any): ...
def rename_table(table: Any, name: Any, engine: Optional[Any] = ..., **kw: Any) -> None: ...
def rename_index(index: Any, name: Any, table: Optional[Any] = ..., engine: Optional[Any] = ..., **kw: Any) -> None: ...
def alter_column(*p: Any, **k: Any): ...

class MyMeta(sqlalchemy.sql.visitors.VisitableType, abc.ABCMeta): ...

class ColumnDelta(DictMixin, sqlalchemy.schema.SchemaItem, metaclass=MyMeta):
    diff_keys: Any = ...
    diffs: Any = ...
    __visit_name__: str = ...
    alter_metadata: Any = ...
    meta: Any = ...
    engine: Any = ...
    def __init__(self, *p: Any, **kw: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __len__(self) -> None: ...
    def __iter__(self) -> Any: ...
    def keys(self): ...
    table: Any = ...
    result_column: Any = ...
    def compare_parameters(self, current_name: Any, *p: Any, **k: Any): ...
    def compare_1_column(self, col: Any, *p: Any, **k: Any): ...
    def compare_2_columns(self, old_col: Any, new_col: Any, *p: Any, **k: Any): ...
    def apply_diffs(self, diffs: Any) -> None: ...
    def are_column_types_eq(self, old_type: Any, new_type: Any): ...
    def process_column(self, column: Any) -> None: ...

class ChangesetTable:
    def create_column(self, column: Any, *p: Any, **kw: Any) -> None: ...
    def drop_column(self, column: Any, *p: Any, **kw: Any) -> None: ...
    new_name: Any = ...
    name: Any = ...
    def rename(self, name: Any, connection: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def deregister(self) -> None: ...

class ChangesetColumn:
    def alter(self, *p: Any, **k: Any): ...
    populate_default: Any = ...
    index_name: Any = ...
    unique_name: Any = ...
    primary_key_name: Any = ...
    def create(self, table: Optional[Any] = ..., index_name: Optional[Any] = ..., unique_name: Optional[Any] = ..., primary_key_name: Optional[Any] = ..., populate_default: bool = ..., connection: Optional[Any] = ..., **kwargs: Any): ...
    table: Any = ...
    def drop(self, table: Optional[Any] = ..., connection: Optional[Any] = ..., **kwargs: Any): ...
    def add_to_table(self, table: Any) -> None: ...
    def remove_from_table(self, table: Any, unset_table: bool = ...) -> None: ...
    def copy_fixed(self, **kw: Any): ...

class ChangesetIndex:
    __visit_name__: str = ...
    new_name: Any = ...
    name: Any = ...
    def rename(self, name: Any, connection: Optional[Any] = ..., **kwargs: Any) -> None: ...

class ChangesetDefaultClause:
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
