from .masked import BaseMaskedArray
from pandas.core.dtypes.base import ExtensionDtype
from typing import Any, Optional, Type

class _IntegerDtype(ExtensionDtype):
    name: str
    base: Any = ...
    type: Type
    na_value: Any = ...
    def is_signed_integer(self): ...
    def is_unsigned_integer(self): ...
    def numpy_dtype(self): ...
    def kind(self): ...
    def itemsize(self): ...
    @classmethod
    def construct_array_type(cls): ...
    def __from_arrow__(self, array: Any): ...

def integer_array(values: Any, dtype: Optional[Any] = ..., copy: bool = ...): ...
def safe_cast(values: Any, dtype: Any, copy: Any): ...
def coerce_to_array(values: Any, dtype: Any, mask: Optional[Any] = ..., copy: bool = ...): ...

class IntegerArray(BaseMaskedArray):
    def dtype(self): ...
    def __init__(self, values: Any, mask: Any, copy: bool = ...) -> None: ...
    def __array_ufunc__(self, ufunc: Any, method: Any, *inputs: Any, **kwargs: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def astype(self, dtype: Any, copy: bool = ...): ...

Int8Dtype: Any
Int16Dtype: Any
Int32Dtype: Any
Int64Dtype: Any
UInt8Dtype: Any
UInt16Dtype: Any
UInt32Dtype: Any
UInt64Dtype: Any
