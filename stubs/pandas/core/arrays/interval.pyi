import numpy as np
from pandas._libs.interval import IntervalMixin
from pandas.core.arrays.base import ExtensionArray
from pandas.core.dtypes.generic import ABCExtensionArray
from typing import Any, Optional

class IntervalArray(IntervalMixin, ExtensionArray):
    ndim: int = ...
    can_hold_na: bool = ...
    def __new__(cls, data: Any, closed: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ..., verify_integrity: bool = ...): ...
    @classmethod
    def from_breaks(cls, breaks: Any, closed: str = ..., copy: bool = ..., dtype: Optional[Any] = ...): ...
    @classmethod
    def from_arrays(cls, left: Any, right: Any, closed: str = ..., copy: bool = ..., dtype: Optional[Any] = ...): ...
    @classmethod
    def from_tuples(cls, data: Any, closed: str = ..., copy: bool = ..., dtype: Optional[Any] = ...): ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> int: ...
    def __getitem__(self, value: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def fillna(self, value: Optional[Any] = ..., method: Optional[Any] = ..., limit: Optional[Any] = ...): ...
    @property
    def dtype(self): ...
    def astype(self, dtype: Any, copy: bool = ...): ...
    def copy(self): ...
    def isna(self): ...
    @property
    def nbytes(self) -> int: ...
    @property
    def size(self) -> int: ...
    def shift(self, periods: int=..., fill_value: object=...) -> ABCExtensionArray: ...
    def take(self, indices: Any, allow_fill: bool = ..., fill_value: Optional[Any] = ..., axis: Optional[Any] = ..., **kwargs: Any): ...
    def value_counts(self, dropna: bool = ...): ...
    @property
    def left(self): ...
    @property
    def right(self): ...
    @property
    def closed(self): ...
    def set_closed(self, closed: Any): ...
    @property
    def length(self): ...
    @property
    def mid(self): ...
    @property
    def is_non_overlapping_monotonic(self): ...
    def __array__(self, dtype: Any=...) -> np.ndarray: ...
    def __arrow_array__(self, type: Optional[Any] = ...): ...
    def to_tuples(self, na_tuple: bool = ...): ...
    def repeat(self, repeats: Any, axis: Optional[Any] = ...): ...
    def contains(self, other: Any): ...
    def overlaps(self, other: Any): ...

def maybe_convert_platform_interval(values: Any): ...
