import numpy as np
from numpy.lib.mixins import NDArrayOperatorsMixin
from pandas.core.arrays.base import ExtensionArray, ExtensionOpsMixin
from pandas.core.dtypes.dtypes import ExtensionDtype
from typing import Any, Optional, Union

class PandasDtype(ExtensionDtype):
    def __init__(self, dtype: Any) -> None: ...
    @property
    def numpy_dtype(self): ...
    @property
    def name(self): ...
    @property
    def type(self): ...
    @classmethod
    def construct_from_string(cls, string: Any): ...
    @classmethod
    def construct_array_type(cls): ...
    @property
    def kind(self): ...
    @property
    def itemsize(self): ...

class PandasArray(ExtensionArray, ExtensionOpsMixin, NDArrayOperatorsMixin):
    __array_priority__: int = ...
    def __init__(self, values: Union[np.ndarray, PandasArray], copy: bool=...) -> None: ...
    @property
    def dtype(self): ...
    def __array__(self, dtype: Any=...) -> np.ndarray: ...
    def __array_ufunc__(self, ufunc: Any, method: Any, *inputs: Any, **kwargs: Any): ...
    def __getitem__(self, item: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __len__(self) -> int: ...
    @property
    def nbytes(self) -> int: ...
    def isna(self): ...
    def fillna(self, value: Optional[Any] = ..., method: Optional[Any] = ..., limit: Optional[Any] = ...): ...
    def take(self, indices: Any, allow_fill: bool = ..., fill_value: Optional[Any] = ...): ...
    def copy(self): ...
    def unique(self): ...
    def any(self, axis: Optional[Any] = ..., out: Optional[Any] = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def all(self, axis: Optional[Any] = ..., out: Optional[Any] = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def min(self, axis: Optional[Any] = ..., out: Optional[Any] = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def max(self, axis: Optional[Any] = ..., out: Optional[Any] = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def sum(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., keepdims: bool = ..., initial: Optional[Any] = ..., skipna: bool = ..., min_count: int = ...): ...
    def prod(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., keepdims: bool = ..., initial: Optional[Any] = ..., skipna: bool = ..., min_count: int = ...): ...
    def mean(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def median(self, axis: Optional[Any] = ..., out: Optional[Any] = ..., overwrite_input: bool = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def std(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., ddof: int = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def var(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., ddof: int = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def sem(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., ddof: int = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def kurt(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def skew(self, axis: Optional[Any] = ..., dtype: Optional[Any] = ..., out: Optional[Any] = ..., keepdims: bool = ..., skipna: bool = ...): ...
    def to_numpy(self, dtype: Optional[Any] = ..., copy: bool = ..., na_value: Any = ...): ...
    def searchsorted(self, value: Any, side: str = ..., sorter: Optional[Any] = ...): ...
    def __invert__(self): ...
