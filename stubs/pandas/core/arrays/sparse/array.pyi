import numpy as np
from pandas._libs.sparse import SparseIndex as SparseIndex
from pandas.core.arrays import ExtensionArray, ExtensionOpsMixin
from pandas.core.base import PandasObject
from typing import Any, Optional

class SparseArray(PandasObject, ExtensionArray, ExtensionOpsMixin):
    def __init__(self, data: Any, sparse_index: Optional[Any] = ..., index: Optional[Any] = ..., fill_value: Optional[Any] = ..., kind: str = ..., dtype: Optional[Any] = ..., copy: bool = ...) -> None: ...
    @classmethod
    def from_spmatrix(cls, data: Any): ...
    def __array__(self, dtype: Any=..., copy: Any=...) -> np.ndarray: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    @property
    def sp_index(self): ...
    @property
    def sp_values(self): ...
    @property
    def dtype(self): ...
    @property
    def fill_value(self): ...
    @fill_value.setter
    def fill_value(self, value: Any) -> None: ...
    @property
    def kind(self) -> str: ...
    def __len__(self) -> int: ...
    @property
    def nbytes(self) -> int: ...
    @property
    def density(self): ...
    @property
    def npoints(self) -> int: ...
    def isna(self): ...
    def fillna(self, value: Optional[Any] = ..., method: Optional[Any] = ..., limit: Optional[Any] = ...): ...
    def shift(self, periods: int = ..., fill_value: Optional[Any] = ...): ...
    def unique(self): ...
    def factorize(self, na_sentinel: int = ...): ...
    def value_counts(self, dropna: bool = ...): ...
    def __getitem__(self, key: Any): ...
    def take(self, indices: Any, allow_fill: bool = ..., fill_value: Optional[Any] = ...): ...
    def searchsorted(self, v: Any, side: str = ..., sorter: Optional[Any] = ...): ...
    def copy(self): ...
    def astype(self, dtype: Optional[Any] = ..., copy: bool = ...): ...
    def map(self, mapper: Any): ...
    def to_dense(self): ...
    def nonzero(self): ...
    def all(self, axis: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    def any(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def sum(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def cumsum(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def mean(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def transpose(self, *axes: Any): ...
    @property
    def T(self): ...
    def __array_ufunc__(self, ufunc: Any, method: Any, *inputs: Any, **kwargs: Any): ...
    def __abs__(self): ...

def make_sparse(arr: Any, kind: str = ..., fill_value: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ...): ...
