import numpy as np
from pandas._typing import Dtype as Dtype
from typing import Any, Optional

def maybe_convert_platform(values: Any): ...
def is_nested_object(obj: Any) -> bool: ...
def maybe_downcast_to_dtype(result: Any, dtype: Any): ...
def maybe_downcast_numeric(result: Any, dtype: Any, do_round: bool=...) -> Any: ...
def maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other: Any) -> Any: ...
def maybe_promote(dtype: Any, fill_value: Any = ...): ...
def infer_dtype_from(val: Any, pandas_dtype: bool=...) -> Any: ...
def infer_dtype_from_scalar(val: Any, pandas_dtype: bool=...) -> Any: ...
def infer_dtype_from_array(arr: Any, pandas_dtype: bool=...) -> Any: ...
def maybe_infer_dtype_type(element: Any): ...
def maybe_upcast(values: Any, fill_value: Any=..., dtype: Any=..., copy: bool=...) -> Any: ...
def invalidate_string_dtypes(dtype_set: Any) -> None: ...
def coerce_indexer_dtype(indexer: Any, categories: Any): ...
def coerce_to_dtypes(result: Any, dtypes: Any): ...
def astype_nansafe(arr: Any, dtype: Any, copy: bool=..., skipna: bool=...) -> Any: ...
def maybe_convert_objects(values: np.ndarray, convert_numeric: bool=...) -> Any: ...
def soft_convert_objects(values: np.ndarray, datetime: bool=..., numeric: bool=..., timedelta: bool=..., coerce: bool=..., copy: bool=...) -> Any: ...
def convert_dtypes(input_array: Any, convert_string: bool=..., convert_integer: bool=..., convert_boolean: bool=...) -> Dtype: ...
def maybe_castable(arr: Any) -> bool: ...
def maybe_infer_to_datetimelike(value: Any, convert_dates: bool=...) -> Any: ...
def maybe_cast_to_datetime(value: Any, dtype: Any, errors: str=...) -> Any: ...
def find_common_type(types: Any): ...
def cast_scalar_to_array(shape: Any, value: Any, dtype: Optional[Any] = ...): ...
def construct_1d_arraylike_from_scalar(value: Any, length: int, dtype: Any) -> Any: ...
def construct_1d_object_array_from_listlike(values: Any): ...
def construct_1d_ndarray_preserving_na(values: Any, dtype: Any=..., copy: bool=...) -> Any: ...
def maybe_cast_to_integer_array(arr: Any, dtype: Any, copy: bool=...) -> Any: ...
