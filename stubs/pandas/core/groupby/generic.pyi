from collections import namedtuple
from pandas._typing import FrameOrSeries as FrameOrSeries
from pandas.core.groupby.groupby import GroupBy
from pandas.core.series import Series
from typing import Any, Callable, FrozenSet, Optional, Type, Union

NamedAgg = namedtuple('NamedAgg', ['column', 'aggfunc'])
AggScalar = Union[str, Callable[..., Any]]
ScalarResult: Any

def generate_property(name: str, klass: Type[FrameOrSeries]) -> Any: ...
def pin_whitelisted_properties(klass: Type[FrameOrSeries], whitelist: FrozenSet[str]) -> Any: ...

class SeriesGroupBy(GroupBy):
    def apply(self, func: Any, *args: Any, **kwargs: Any): ...
    def aggregate(self, func: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    agg: Any = ...
    def transform(self, func: Any, *args: Any, **kwargs: Any): ...
    def filter(self, func: Any, dropna: bool = ..., *args: Any, **kwargs: Any): ...
    def nunique(self, dropna: bool=...) -> Series: ...
    def describe(self, **kwargs: Any): ...
    def value_counts(self, normalize: bool = ..., sort: bool = ..., ascending: bool = ..., bins: Optional[Any] = ..., dropna: bool = ...): ...
    def count(self) -> Series: ...
    def pct_change(self, periods: int = ..., fill_method: str = ..., limit: Optional[Any] = ..., freq: Optional[Any] = ...): ...

class DataFrameGroupBy(GroupBy):
    def aggregate(self, func: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    agg: Any = ...
    def transform(self, func: Any, *args: Any, **kwargs: Any): ...
    def filter(self, func: Any, dropna: bool = ..., *args: Any, **kwargs: Any): ...
    def __getitem__(self, key: Any): ...
    def count(self): ...
    def nunique(self, dropna: bool=...) -> Any: ...
    boxplot: Any = ...
