from pandas._typing import FrameOrSeries as FrameOrSeries, Scalar as Scalar
from pandas.core.base import PandasObject, SelectionMixin
from pandas.core.frame import DataFrame
from pandas.core.generic import NDFrame
from pandas.core.groupby import ops as ops
from typing import Any, List, Optional, Union

class GroupByPlot(PandasObject):
    def __init__(self, groupby: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def __getattr__(self, name: str) -> Any: ...

class _GroupBy(PandasObject, SelectionMixin):
    level: Any = ...
    as_index: Any = ...
    keys: Any = ...
    sort: Any = ...
    group_keys: Any = ...
    squeeze: Any = ...
    observed: Any = ...
    mutated: Any = ...
    obj: Any = ...
    axis: Any = ...
    grouper: Any = ...
    exclusions: Any = ...
    def __init__(self, obj: NDFrame, keys: Optional[_KeysArgType]=..., axis: int=..., level: Any=..., grouper: Optional[ops.BaseGrouper]=..., exclusions: Any=..., selection: Any=..., as_index: bool=..., sort: bool=..., group_keys: bool=..., squeeze: bool=..., observed: bool=..., mutated: bool=...) -> None: ...
    def __len__(self) -> int: ...
    @property
    def groups(self): ...
    @property
    def ngroups(self): ...
    @property
    def indices(self): ...
    def __getattr__(self, attr: str) -> Any: ...
    def pipe(self, func: Any, *args: Any, **kwargs: Any): ...
    plot: Any = ...
    def get_group(self, name: Any, obj: Optional[Any] = ...): ...
    def __iter__(self) -> Any: ...
    def apply(self, func: Any, *args: Any, **kwargs: Any): ...
    def transform(self, func: Any, *args: Any, **kwargs: Any) -> None: ...

class GroupBy(_GroupBy):
    def any(self, skipna: bool=...) -> Any: ...
    def all(self, skipna: bool=...) -> Any: ...
    def count(self) -> None: ...
    def mean(self, *args: Any, **kwargs: Any): ...
    def median(self, **kwargs: Any): ...
    def std(self, ddof: int=..., *args: Any, **kwargs: Any) -> Any: ...
    def var(self, ddof: int=..., *args: Any, **kwargs: Any) -> Any: ...
    def sem(self, ddof: int=...) -> Any: ...
    def size(self): ...
    def ohlc(self) -> DataFrame: ...
    def describe(self, **kwargs: Any): ...
    def resample(self, rule: Any, *args: Any, **kwargs: Any): ...
    def rolling(self, *args: Any, **kwargs: Any): ...
    def expanding(self, *args: Any, **kwargs: Any): ...
    def pad(self, limit: Optional[Any] = ...): ...
    ffill: Any = ...
    def backfill(self, limit: Optional[Any] = ...): ...
    bfill: Any = ...
    def nth(self, n: Union[int, List[int]], dropna: Optional[str]=...) -> DataFrame: ...
    def quantile(self, q: Any=..., interpolation: str=...) -> Any: ...
    def ngroup(self, ascending: bool=...) -> Any: ...
    def cumcount(self, ascending: bool=...) -> Any: ...
    def rank(self, method: str=..., ascending: bool=..., na_option: str=..., pct: bool=..., axis: int=...) -> Any: ...
    def cumprod(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def cumsum(self, axis: int = ..., *args: Any, **kwargs: Any): ...
    def cummin(self, axis: int = ..., **kwargs: Any): ...
    def cummax(self, axis: int = ..., **kwargs: Any): ...
    def shift(self, periods: int = ..., freq: Optional[Any] = ..., axis: int = ..., fill_value: Optional[Any] = ...): ...
    def pct_change(self, periods: int = ..., fill_method: str = ..., limit: Optional[Any] = ..., freq: Optional[Any] = ..., axis: int = ...): ...
    def head(self, n: int = ...): ...
    def tail(self, n: int = ...): ...

def get_groupby(obj: NDFrame, by: Optional[_KeysArgType]=..., axis: int=..., level: Any=..., grouper: Optional[ops.BaseGrouper]=..., exclusions: Any=..., selection: Any=..., as_index: bool=..., sort: bool=..., group_keys: bool=..., squeeze: bool=..., observed: bool=..., mutated: bool=...) -> GroupBy: ...
