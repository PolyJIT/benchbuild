import numpy as np
from pandas._typing import FrameOrSeries as FrameOrSeries
from pandas.core.groupby import grouper
from pandas.core.indexes.api import Index
from pandas.core.series import Series
from typing import Any, List, Optional, Sequence, Tuple

class BaseGrouper:
    axis: Any = ...
    sort: Any = ...
    group_keys: Any = ...
    mutated: Any = ...
    indexer: Any = ...
    def __init__(self, axis: Index, groupings: Sequence[grouper.Grouping], sort: bool=..., group_keys: bool=..., mutated: bool=..., indexer: Optional[np.ndarray]=...) -> None: ...
    @property
    def groupings(self) -> List[grouper.Grouping]: ...
    @property
    def shape(self): ...
    def __iter__(self) -> Any: ...
    @property
    def nkeys(self) -> int: ...
    def get_iterator(self, data: FrameOrSeries, axis: int=...) -> Any: ...
    def apply(self, f: Any, data: FrameOrSeries, axis: int=...) -> Any: ...
    def indices(self): ...
    @property
    def codes(self) -> List[np.ndarray]: ...
    @property
    def levels(self) -> List[Index]: ...
    @property
    def names(self): ...
    def size(self) -> Series: ...
    def groups(self): ...
    def is_monotonic(self) -> bool: ...
    def group_info(self): ...
    def codes_info(self) -> np.ndarray: ...
    def ngroups(self) -> int: ...
    @property
    def reconstructed_codes(self) -> List[np.ndarray]: ...
    def result_index(self) -> Index: ...
    def get_group_levels(self): ...
    def aggregate(self, values: Any, how: str, axis: int=..., min_count: int=...) -> Tuple[np.ndarray, Optional[List[str]]]: ...
    def transform(self, values: Any, how: str, axis: int=..., **kwargs: Any) -> Any: ...
    def agg_series(self, obj: Series, func: Any) -> Any: ...

class BinGrouper(BaseGrouper):
    bins: Any = ...
    binlabels: Any = ...
    mutated: Any = ...
    indexer: Any = ...
    def __init__(self, bins: Any, binlabels: Any, filter_empty: bool=..., mutated: bool=..., indexer: Any=...) -> None: ...
    def groups(self): ...
    @property
    def nkeys(self) -> int: ...
    def get_iterator(self, data: FrameOrSeries, axis: int=...) -> Any: ...
    def indices(self): ...
    def group_info(self): ...
    def reconstructed_codes(self) -> List[np.ndarray]: ...
    def result_index(self): ...
    @property
    def levels(self): ...
    @property
    def names(self): ...
    @property
    def groupings(self) -> List[grouper.Grouping]: ...
    def agg_series(self, obj: Series, func: Any) -> Any: ...

class DataSplitter:
    data: Any = ...
    labels: Any = ...
    ngroups: Any = ...
    axis: Any = ...
    def __init__(self, data: FrameOrSeries, labels: Any, ngroups: int, axis: int=...) -> None: ...
    def slabels(self): ...
    def sort_idx(self): ...
    def __iter__(self) -> Any: ...

class SeriesSplitter(DataSplitter): ...

class FrameSplitter(DataSplitter):
    def fast_apply(self, f: Any, names: Any): ...

def get_splitter(data: FrameOrSeries, *args: Any, **kwargs: Any) -> DataSplitter: ...
