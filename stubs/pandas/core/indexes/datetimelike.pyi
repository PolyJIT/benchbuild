from pandas.core.accessor import PandasDelegate
from pandas.core.indexes.extension import ExtensionIndex
from pandas.core.indexes.numeric import Int64Index
from pandas.tseries.frequencies import DateOffset
from typing import Any, List, Optional

class DatetimeIndexOpsMixin(ExtensionIndex):
    freq: Optional[DateOffset]
    freqstr: Optional[str]
    hasnans: Any = ...
    @property
    def is_all_dates(self) -> bool: ...
    @property
    def values(self): ...
    def __array_wrap__(self, result: Any, context: Optional[Any] = ...): ...
    def equals(self, other: Any) -> bool: ...
    def __contains__(self, key: Any): ...
    def sort_values(self, return_indexer: bool = ..., ascending: bool = ...): ...
    def take(self, indices: Any, axis: int = ..., allow_fill: bool = ..., fill_value: Optional[Any] = ..., **kwargs: Any): ...
    def tolist(self) -> List: ...
    def min(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any, **kwargs: Any): ...
    def argmin(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any, **kwargs: Any): ...
    def max(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any, **kwargs: Any): ...
    def argmax(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any, **kwargs: Any): ...
    __add__: Any = ...
    __radd__: Any = ...
    __sub__: Any = ...
    __rsub__: Any = ...
    __pow__: Any = ...
    __rpow__: Any = ...
    __mul__: Any = ...
    __rmul__: Any = ...
    __floordiv__: Any = ...
    __rfloordiv__: Any = ...
    __mod__: Any = ...
    __rmod__: Any = ...
    __divmod__: Any = ...
    __rdivmod__: Any = ...
    __truediv__: Any = ...
    __rtruediv__: Any = ...
    def isin(self, values: Any, level: Optional[Any] = ...): ...
    def where(self, cond: Any, other: Optional[Any] = ...): ...
    def shift(self, periods: int = ..., freq: Optional[Any] = ...): ...
    def delete(self, loc: Any): ...

class DatetimeTimedeltaMixin(DatetimeIndexOpsMixin, Int64Index):
    def difference(self, other: Any, sort: Optional[Any] = ...): ...
    def intersection(self, other: Any, sort: bool = ...): ...
    def join(self, other: Any, how: str=..., level: Any=..., return_indexers: Any=..., sort: Any=...) -> Any: ...

class DatetimelikeDelegateMixin(PandasDelegate): ...
