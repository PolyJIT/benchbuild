from pandas.core.indexes.base import Index
from typing import Any, List, Optional

def inherit_from_data(name: str, delegate: Any, cache: bool=..., wrap: bool=...) -> Any: ...
def inherit_names(names: List[str], delegate: Any, cache: bool=..., wrap: bool=...) -> Any: ...
def make_wrapped_arith_op(opname: Any): ...

class ExtensionIndex(Index):
    __eq__: Any = ...
    __ne__: Any = ...
    __lt__: Any = ...
    __gt__: Any = ...
    __le__: Any = ...
    __ge__: Any = ...
    def __getitem__(self, key: Any): ...
    def __iter__(self) -> Any: ...
    def dropna(self, how: str = ...): ...
    def repeat(self, repeats: Any, axis: Optional[Any] = ...): ...
    def take(self, indices: Any, axis: int = ..., allow_fill: bool = ..., fill_value: Optional[Any] = ..., **kwargs: Any): ...
    def unique(self, level: Optional[Any] = ...): ...
    def map(self, mapper: Any, na_action: Optional[Any] = ...): ...
    def astype(self, dtype: Any, copy: bool = ...): ...
