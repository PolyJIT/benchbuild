import numpy as np
from pandas._libs.interval import IntervalMixin
from pandas._typing import AnyArrayLike as AnyArrayLike
from pandas.core.dtypes.generic import ABCSeries
from pandas.core.indexes.extension import ExtensionIndex
from typing import Any, Optional, Tuple, Union

class SetopCheck:
    op_name: Any = ...
    def __init__(self, op_name: Any) -> None: ...
    def __call__(self, setop: Any): ...

class IntervalIndex(IntervalMixin, ExtensionIndex):
    def __new__(cls: Any, data: Any, closed: Any=..., dtype: Any=..., copy: bool=..., name: Any=..., verify_integrity: bool=...) -> Any: ...
    @classmethod
    def from_breaks(cls: Any, breaks: Any, closed: str=..., name: Any=..., copy: bool=..., dtype: Any=...) -> Any: ...
    @classmethod
    def from_arrays(cls: Any, left: Any, right: Any, closed: str=..., name: Any=..., copy: bool=..., dtype: Any=...) -> Any: ...
    @classmethod
    def from_tuples(cls: Any, data: Any, closed: str=..., name: Any=..., copy: bool=..., dtype: Any=...) -> Any: ...
    def __contains__(self, key: Any) -> bool: ...
    def values(self): ...
    def __array_wrap__(self, result: Any, context: Optional[Any] = ...): ...
    def __reduce__(self): ...
    def astype(self, dtype: Any, copy: bool = ...): ...
    @property
    def inferred_type(self) -> str: ...
    def memory_usage(self, deep: bool=...) -> int: ...
    def is_monotonic(self) -> bool: ...
    def is_monotonic_increasing(self) -> bool: ...
    def is_monotonic_decreasing(self) -> bool: ...
    def is_unique(self): ...
    @property
    def is_overlapping(self): ...
    def get_loc(self, key: Any, method: Optional[str]=..., tolerance: Any=...) -> Union[int, slice, np.ndarray]: ...
    def get_indexer(self, target: AnyArrayLike, method: Optional[str]=..., limit: Optional[int]=..., tolerance: Optional[Any]=...) -> np.ndarray: ...
    def get_indexer_non_unique(self, target: AnyArrayLike) -> Tuple[np.ndarray, np.ndarray]: ...
    def get_indexer_for(self, target: AnyArrayLike, **kwargs: Any) -> np.ndarray: ...
    def get_value(self, series: ABCSeries, key: Any) -> Any: ...
    def where(self, cond: Any, other: Optional[Any] = ...): ...
    def delete(self, loc: Any): ...
    def insert(self, loc: Any, item: Any): ...
    def take(self, indices: Any, axis: int = ..., allow_fill: bool = ..., fill_value: Optional[Any] = ..., **kwargs: Any): ...
    def __getitem__(self, value: Any): ...
    def argsort(self, *args: Any, **kwargs: Any): ...
    def equals(self, other: Any) -> bool: ...
    def intersection(self, other: IntervalIndex, sort: bool=...) -> IntervalIndex: ...
    @property
    def is_all_dates(self) -> bool: ...
    union: Any = ...
    difference: Any = ...
    symmetric_difference: Any = ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

def interval_range(start: Optional[Any] = ..., end: Optional[Any] = ..., periods: Optional[Any] = ..., freq: Optional[Any] = ..., name: Optional[Any] = ..., closed: str = ...): ...
