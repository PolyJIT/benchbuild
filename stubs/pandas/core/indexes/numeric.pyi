import numpy as np
from pandas._typing import Dtype as Dtype
from pandas.core.indexes.base import Index
from typing import Any, Optional

class NumericIndex(Index):
    def __new__(cls, data: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ..., name: Optional[Any] = ...): ...
    @property
    def is_all_dates(self) -> bool: ...
    def insert(self, loc: Any, item: Any): ...

class IntegerIndex(NumericIndex):
    def __contains__(self, key: Any) -> bool: ...

class Int64Index(IntegerIndex):
    __doc__: Any = ...
    @property
    def inferred_type(self) -> str: ...
    @property
    def asi8(self) -> np.ndarray: ...

class UInt64Index(IntegerIndex):
    __doc__: Any = ...
    @property
    def inferred_type(self) -> str: ...
    @property
    def asi8(self) -> np.ndarray: ...

class Float64Index(NumericIndex):
    __doc__: Any = ...
    @property
    def inferred_type(self) -> str: ...
    def astype(self, dtype: Any, copy: bool = ...): ...
    def get_value(self, series: Any, key: Any): ...
    def equals(self, other: Any) -> bool: ...
    def __contains__(self, other: Any) -> bool: ...
    def get_loc(self, key: Any, method: Optional[Any] = ..., tolerance: Optional[Any] = ...): ...
    def is_unique(self) -> bool: ...
    def isin(self, values: Any, level: Optional[Any] = ...): ...
