import numpy as np
from pandas.core.indexes.datetimelike import DatetimeIndexOpsMixin, DatetimelikeDelegateMixin
from pandas.core.indexes.numeric import Int64Index
from typing import Any, Optional

class PeriodDelegateMixin(DatetimelikeDelegateMixin): ...

class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin):
    def __new__(cls, data: Optional[Any] = ..., ordinal: Optional[Any] = ..., freq: Optional[Any] = ..., tz: Optional[Any] = ..., dtype: Optional[Any] = ..., copy: bool = ..., name: Optional[Any] = ..., **fields: Any): ...
    @property
    def values(self): ...
    def __contains__(self, key: Any) -> bool: ...
    def __array__(self, dtype: Any=...) -> np.ndarray: ...
    def __array_wrap__(self, result: Any, context: Optional[Any] = ...): ...
    def asof_locs(self, where: Any, mask: Any): ...
    def astype(self, dtype: Any, copy: bool = ..., how: str = ...): ...
    def searchsorted(self, value: Any, side: str = ..., sorter: Optional[Any] = ...): ...
    @property
    def is_full(self) -> bool: ...
    @property
    def inferred_type(self) -> str: ...
    def get_value(self, series: Any, key: Any): ...
    def get_indexer(self, target: Any, method: Optional[Any] = ..., limit: Optional[Any] = ..., tolerance: Optional[Any] = ...): ...
    def get_indexer_non_unique(self, target: Any): ...
    def get_loc(self, key: Any, method: Optional[Any] = ..., tolerance: Optional[Any] = ...): ...
    def insert(self, loc: Any, item: Any): ...
    def join(self, other: Any, how: str = ..., level: Optional[Any] = ..., return_indexers: bool = ..., sort: bool = ...): ...
    def intersection(self, other: Any, sort: bool = ...): ...
    def difference(self, other: Any, sort: Optional[Any] = ...): ...
    def memory_usage(self, deep: bool = ...): ...

def period_range(start: Any=..., end: Any=..., periods: Any=..., freq: Any=..., name: Any=...) -> PeriodIndex: ...
