from typing import Any, Optional

def get_mgr_concatenation_plan(mgr: Any, indexers: Any): ...

class JoinUnit:
    block: Any = ...
    indexers: Any = ...
    shape: Any = ...
    def __init__(self, block: Any, shape: Any, indexers: Optional[Any] = ...) -> None: ...
    def needs_filling(self): ...
    def dtype(self): ...
    def is_na(self): ...
    def get_reindexed_values(self, empty_dtype: Any, upcasted_na: Any): ...

def concatenate_join_units(join_units: Any, concat_axis: Any, copy: Any): ...
def is_uniform_join_units(join_units: Any): ...
def combine_concat_plans(plans: Any, concat_axis: Any): ...
