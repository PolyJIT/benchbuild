from datetime import tzinfo
from typing import Any, Optional

def with_pattern(pattern: Any, regex_group_count: Optional[Any] = ...): ...

class FixedTzOffset(tzinfo):
    ZERO: Any = ...
    def __init__(self, offset: Any, name: Any) -> None: ...
    def utcoffset(self, dt: Any): ...
    def tzname(self, dt: Any): ...
    def dst(self, dt: Any): ...
    def __eq__(self, other: Any) -> Any: ...

class TooManyFields(ValueError): ...
class RepeatedNameError(ValueError): ...

class Parser:
    def __init__(self, format: Any, extra_types: Optional[Any] = ..., case_sensitive: bool = ...) -> None: ...
    def parse(self, string: Any, evaluate_result: bool = ...): ...
    def search(self, string: Any, pos: int = ..., endpos: Optional[Any] = ..., evaluate_result: bool = ...): ...
    def findall(self, string: Any, pos: int = ..., endpos: Optional[Any] = ..., extra_types: Optional[Any] = ..., evaluate_result: bool = ...): ...
    def evaluate_result(self, m: Any): ...

class Result:
    fixed: Any = ...
    named: Any = ...
    spans: Any = ...
    def __init__(self, fixed: Any, named: Any, spans: Any) -> None: ...
    def __getitem__(self, item: Any): ...
    def __contains__(self, name: Any): ...

class Match:
    parser: Any = ...
    match: Any = ...
    def __init__(self, parser: Any, match: Any) -> None: ...
    def evaluate_result(self): ...

class ResultIterator:
    parser: Any = ...
    string: Any = ...
    pos: Any = ...
    endpos: Any = ...
    evaluate_result: Any = ...
    def __init__(self, parser: Any, string: Any, pos: Any, endpos: Any, evaluate_result: bool = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    next: Any = ...

def parse(format: Any, string: Any, extra_types: Optional[Any] = ..., evaluate_result: bool = ..., case_sensitive: bool = ...): ...
def search(format: Any, string: Any, pos: int = ..., endpos: Optional[Any] = ..., extra_types: Optional[Any] = ..., evaluate_result: bool = ..., case_sensitive: bool = ...): ...
def findall(format: Any, string: Any, pos: int = ..., endpos: Optional[Any] = ..., extra_types: Optional[Any] = ..., evaluate_result: bool = ..., case_sensitive: bool = ...): ...
