from .switches import SwitchError
from typing import Any, Optional

T_: Any
ngettext: Any

class ShowHelp(SwitchError): ...
class ShowHelpAll(SwitchError): ...
class ShowVersion(SwitchError): ...

class SwitchParseInfo:
    swname: Any = ...
    val: Any = ...
    index: Any = ...
    def __init__(self, swname: Any, val: Any, index: Any) -> None: ...

class Subcommand:
    name: Any = ...
    subapplication: Any = ...
    def __init__(self, name: Any, subapplication: Any) -> None: ...
    def get(self): ...

class Application:
    PROGNAME: Any = ...
    DESCRIPTION: Any = ...
    DESCRIPTION_MORE: Any = ...
    VERSION: Any = ...
    USAGE: Any = ...
    COLOR_USAGE: Any = ...
    COLOR_GROUPS: Any = ...
    CALL_MAIN_IF_NESTED_COMMAND: bool = ...
    SUBCOMMAND_HELPMSG: Any = ...
    ALLOW_ABBREV: bool = ...
    parent: Any = ...
    nested_command: Any = ...
    def __new__(cls, executable: Optional[Any] = ...): ...
    executable: Any = ...
    def __init__(self, executable: Any): ...
    @property
    def root_app(self): ...
    @classmethod
    def unbind_switches(cls, *switch_names: Any) -> None: ...
    @classmethod
    def subcommand(cls, name: Any, subapp: Optional[Any] = ...): ...
    @classmethod
    def autocomplete(cls, argv: Any) -> None: ...
    @classmethod
    def run(cls, argv: Optional[Any] = ..., exit: bool = ...): ...
    @classmethod
    def invoke(cls, *args: Any, **switches: Any): ...
    def main(self, *args: Any): ...
    def cleanup(self, retcode: Any) -> None: ...
    def helpall(self) -> None: ...
    def help(self): ...
    def version(self) -> None: ...
