import abc
import six
from abc import abstractmethod
from typing import Any, Optional

class ConfigBase(six.ABC, metaclass=abc.ABCMeta):
    filename: Any = ...
    changed: bool = ...
    def __init__(self, filename: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    @abstractmethod
    def read(self) -> Any: ...
    @abstractmethod
    def write(self) -> Any: ...
    def get(self, option: Any, default: Optional[Any] = ...): ...
    def set(self, option: Any, value: Any) -> None: ...
    def __getitem__(self, option: Any): ...
    def __setitem__(self, option: Any, value: Any): ...

class ConfigINI(ConfigBase):
    DEFAULT_SECTION: str = ...
    slots: Any = ...
    parser: Any = ...
    def __init__(self, filename: Any) -> None: ...
    def read(self) -> None: ...
    def write(self) -> None: ...
Config = ConfigINI
