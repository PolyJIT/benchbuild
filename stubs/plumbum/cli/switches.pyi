import abc
import six
from abc import abstractmethod
from typing import Any, Optional

ngettext: Any

class SwitchError(Exception): ...
class PositionalArgumentsError(SwitchError): ...
class SwitchCombinationError(SwitchError): ...
class UnknownSwitch(SwitchError): ...
class MissingArgument(SwitchError): ...
class MissingMandatorySwitch(SwitchError): ...
class WrongArgumentType(SwitchError): ...
class SubcommandError(SwitchError): ...

class SwitchInfo:
    def __init__(self, **kwargs: Any) -> None: ...

def switch(names: Any, argtype: Optional[Any] = ..., argname: Optional[Any] = ..., list: bool = ..., mandatory: bool = ..., requires: Any = ..., excludes: Any = ..., help: Optional[Any] = ..., overridable: bool = ..., group: str = ..., envname: Optional[Any] = ...): ...
def autoswitch(*args: Any, **kwargs: Any): ...

class SwitchAttr:
    ATTR_NAME: str = ...
    __doc__: str = ...
    def __init__(self, names: Any, argtype: Any = ..., default: Optional[Any] = ..., list: bool = ..., argname: Any = ..., **kwargs: Any) -> None: ...
    def __call__(self, inst: Any, val: Any) -> None: ...
    def __get__(self, inst: Any, cls: Any): ...
    def __set__(self, inst: Any, val: Any) -> None: ...

class Flag(SwitchAttr):
    def __init__(self, names: Any, default: bool = ..., **kwargs: Any) -> None: ...
    def __call__(self, inst: Any) -> None: ...

class CountOf(SwitchAttr):
    def __init__(self, names: Any, default: int = ..., **kwargs: Any) -> None: ...
    def __call__(self, inst: Any, v: Any) -> None: ...

class positional:
    args: Any = ...
    kargs: Any = ...
    def __init__(self, *args: Any, **kargs: Any) -> None: ...
    def __call__(self, function: Any): ...

class Validator(six.ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __call__(self, obj: Any) -> Any: ...
    def choices(self, partial: str = ...): ...

class Range(Validator):
    start: Any = ...
    end: Any = ...
    def __init__(self, start: Any, end: Any) -> None: ...
    def __call__(self, obj: Any): ...
    def choices(self, partial: str = ...): ...

class Set(Validator):
    case_sensitive: Any = ...
    csv: Any = ...
    values: Any = ...
    def __init__(self, *values: Any, **kwargs: Any) -> None: ...
    def __call__(self, value: Any, check_csv: bool = ...): ...
    def choices(self, partial: str = ...): ...

CSV: Any

class Predicate:
    func: Any = ...
    def __init__(self, func: Any) -> None: ...
    def __call__(self, val: Any): ...
    def choices(self, partial: str = ...): ...

def ExistingDirectory(val: Any): ...
def MakeDirectory(val: Any): ...
def ExistingFile(val: Any): ...
def NonexistentPath(val: Any): ...
