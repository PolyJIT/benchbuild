from typing import Any, Optional

class ColorFactory:
    reset: Any = ...
    def __init__(self, fg: Any, style: Any) -> None: ...
    def __getattr__(self, item: Any): ...
    def full(self, name: Any): ...
    def simple(self, name: Any): ...
    def rgb(self, r: Any, g: Optional[Any] = ..., b: Optional[Any] = ...): ...
    def hex(self, hexcode: Any): ...
    def ansi(self, ansiseq: Any): ...
    def __getitem__(self, val: Any): ...
    def __call__(self, val_or_r: Optional[Any] = ..., g: Optional[Any] = ..., b: Optional[Any] = ...): ...
    def __iter__(self) -> Any: ...
    def __invert__(self): ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any): ...

class StyleFactory(ColorFactory):
    fg: Any = ...
    bg: Any = ...
    do_nothing: Any = ...
    reset: Any = ...
    def __init__(self, style: Any) -> None: ...
    @property
    def use_color(self): ...
    @use_color.setter
    def use_color(self, val: Any) -> None: ...
    def from_ansi(self, ansi_sequence: Any): ...
    @property
    def stdout(self): ...
    @stdout.setter
    def stdout(self, newout: Any) -> None: ...
    def get_colors_from_string(self, color: str = ...): ...
    def filter(self, colored_string: Any): ...
    def contains_colors(self, colored_string: Any): ...
    def extract(self, colored_string: Any): ...
    def load_stylesheet(self, stylesheet: Any = ...) -> None: ...
