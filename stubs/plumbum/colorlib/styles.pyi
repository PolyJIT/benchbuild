import abc
from abc import ABC
from typing import Any, Dict, Optional, Union

class ColorNotFound(Exception): ...
class AttributeNotFound(Exception): ...
class ResetNotSupported(Exception): ...

class Color(ABC):
    fg: Any = ...
    isreset: bool = ...
    rgb: Any = ...
    number: Any = ...
    representation: int = ...
    exact: bool = ...
    def __init__(self, r_or_color: Optional[Any] = ..., g: Optional[Any] = ..., b: Optional[Any] = ..., fg: bool = ...) -> None: ...
    @classmethod
    def from_simple(cls, color: Any, fg: bool = ...): ...
    @classmethod
    def from_full(cls, color: Any, fg: bool = ...): ...
    @classmethod
    def from_hex(cls, color: Any, fg: bool = ...): ...
    @property
    def name(self): ...
    @property
    def name_camelcase(self): ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def ansi_sequence(self): ...
    @property
    def ansi_codes(self): ...
    @property
    def hex_code(self): ...
    def to_representation(self, val: Any): ...
    def limit_representation(self, val: Any): ...

class Style(metaclass=abc.ABCMeta):
    color_class: Any = ...
    attribute_names: Union[Dict[str, str], Dict[str, int]] = ...
    end: str = ...
    ANSI_REG: Any = ...
    @property
    def stdout(self): ...
    @stdout.setter
    def stdout(self, newout: Any) -> None: ...
    attributes: Any = ...
    fg: Any = ...
    bg: Any = ...
    isreset: Any = ...
    def __init__(self, attributes: Optional[Any] = ..., fgcolor: Optional[Any] = ..., bgcolor: Optional[Any] = ..., reset: bool = ...) -> None: ...
    @classmethod
    def from_color(cls, color: Any): ...
    def invert(self): ...
    @property
    def reset(self): ...
    def __copy__(self): ...
    def __invert__(self): ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def wrap(self, wrap_this: Any): ...
    def __and__(self, other: Any): ...
    def __rand__(self, other: Any): ...
    def __ror__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __call__(self) -> None: ...
    def now(self) -> None: ...
    def print(self, *printables: Any, **kargs: Any) -> None: ...
    print_: Any = ...
    def __getitem__(self, wrapped: Any): ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: Any, value: Any, traceback: Any): ...
    @property
    def ansi_codes(self): ...
    @property
    def ansi_sequence(self): ...
    def __eq__(self, other: Any) -> Any: ...
    @classmethod
    def from_ansi(cls, ansi_string: Any, filter_resets: bool = ...): ...
    def add_ansi(self, sequence: Any, filter_resets: bool = ...) -> None: ...
    @classmethod
    def string_filter_ansi(cls, colored_string: Any): ...
    @classmethod
    def string_contains_colors(cls, colored_string: Any): ...
    def to_representation(self, rep: Any): ...
    def limit_representation(self, rep: Any): ...
    @property
    def basic(self): ...
    @property
    def simple(self): ...
    @property
    def full(self): ...
    @property
    def true(self): ...

class ANSIStyle(Style):
    use_color: Any = ...
    attribute_names: Any = ...

class HTMLStyle(Style):
    attribute_names: Any = ...
    end: str = ...
