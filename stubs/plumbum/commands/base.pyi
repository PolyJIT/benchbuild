from plumbum.commands.processes import iter_lines as iter_lines
from typing import Any, Optional

class RedirectionError(Exception): ...

def shquote(text: Any): ...
def shquote_list(seq: Any): ...

class BaseCommand:
    def __or__(self, other: Any): ...
    def __gt__(self, file: Any) -> Any: ...
    def __rshift__(self, file: Any): ...
    def __ge__(self, file: Any) -> Any: ...
    def __lt__(self, file: Any) -> Any: ...
    def __lshift__(self, data: Any): ...
    def __getitem__(self, args: Any): ...
    def bound_command(self, *args: Any): ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def with_env(self, **envvars: Any): ...
    setenv: Any = ...
    @property
    def machine(self) -> None: ...
    def formulate(self, level: int = ..., args: Any = ...) -> None: ...
    def popen(self, args: Any = ..., **kwargs: Any) -> None: ...
    def nohup(self, cwd: str = ..., stdout: str = ..., stderr: Optional[Any] = ..., append: bool = ...): ...
    def bgrun(self, args: Any = ..., **kwargs: Any): ...
    def run(self, args: Any = ..., **kwargs: Any): ...
    def run_bg(self, **kwargs: Any): ...
    def run_fg(self, **kwargs: Any): ...
    def run_tee(self, **kwargs: Any): ...
    def run_tf(self, **kwargs: Any): ...
    def run_retcode(self, **kwargs: Any): ...
    def run_nohup(self, **kwargs: Any): ...

class BoundCommand(BaseCommand):
    cmd: Any = ...
    args: Any = ...
    def __init__(self, cmd: Any, args: Any) -> None: ...
    def formulate(self, level: int = ..., args: Any = ...): ...
    @property
    def machine(self): ...
    def popen(self, args: Any = ..., **kwargs: Any): ...

class BoundEnvCommand(BaseCommand):
    cmd: Any = ...
    envvars: Any = ...
    def __init__(self, cmd: Any, envvars: Any) -> None: ...
    def formulate(self, level: int = ..., args: Any = ...): ...
    @property
    def machine(self): ...
    def popen(self, args: Any = ..., **kwargs: Any): ...

class Pipeline(BaseCommand):
    srccmd: Any = ...
    dstcmd: Any = ...
    def __init__(self, srccmd: Any, dstcmd: Any) -> None: ...
    def formulate(self, level: int = ..., args: Any = ...): ...
    @property
    def machine(self): ...
    def popen(self, args: Any = ..., **kwargs: Any): ...

class BaseRedirection(BaseCommand):
    SYM: str = ...
    KWARG: str = ...
    MODE: str = ...
    cmd: Any = ...
    file: Any = ...
    def __init__(self, cmd: Any, file: Any) -> None: ...
    def formulate(self, level: int = ..., args: Any = ...): ...
    @property
    def machine(self): ...
    def popen(self, args: Any = ..., **kwargs: Any): ...

class StdinRedirection(BaseRedirection):
    SYM: str = ...
    KWARG: str = ...
    MODE: str = ...

class StdoutRedirection(BaseRedirection):
    SYM: str = ...
    KWARG: str = ...
    MODE: str = ...

class AppendingStdoutRedirection(BaseRedirection):
    SYM: str = ...
    KWARG: str = ...
    MODE: str = ...

class StderrRedirection(BaseRedirection):
    SYM: str = ...
    KWARG: str = ...
    MODE: str = ...

class _ERROUT(int): ...

ERROUT: Any

class StdinDataRedirection(BaseCommand):
    CHUNK_SIZE: int = ...
    cmd: Any = ...
    data: Any = ...
    def __init__(self, cmd: Any, data: Any) -> None: ...
    def formulate(self, level: int = ..., args: Any = ...): ...
    @property
    def machine(self): ...
    def popen(self, args: Any = ..., **kwargs: Any): ...

class ConcreteCommand(BaseCommand):
    QUOTE_LEVEL: int = ...
    executable: Any = ...
    custom_encoding: Any = ...
    cwd: Any = ...
    env: Any = ...
    def __init__(self, executable: Any, encoding: Any) -> None: ...
    def formulate(self, level: int = ..., args: Any = ...): ...
