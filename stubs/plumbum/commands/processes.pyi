from typing import Any, Optional

class ProcessExecutionError(EnvironmentError):
    argv: Any = ...
    retcode: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    def __init__(self, argv: Any, retcode: Any, stdout: Any, stderr: Any) -> None: ...

class ProcessTimedOut(Exception):
    argv: Any = ...
    def __init__(self, msg: Any, argv: Any) -> None: ...

class ProcessLineTimedOut(Exception):
    argv: Any = ...
    machine: Any = ...
    def __init__(self, msg: Any, argv: Any, machine: Any) -> None: ...

class CommandNotFound(AttributeError):
    program: Any = ...
    path: Any = ...
    def __init__(self, program: Any, path: Any) -> None: ...

class MinHeap:
    def __init__(self, items: Any = ...) -> None: ...
    def __len__(self): ...
    def push(self, item: Any) -> None: ...
    def pop(self) -> None: ...
    def peek(self): ...

bgthd: Any

def run_proc(proc: Any, retcode: Any, timeout: Optional[Any] = ...): ...

BY_POSITION: Any
BY_TYPE: Any
DEFAULT_ITER_LINES_MODE = BY_POSITION

def iter_lines(proc: Any, retcode: int = ..., timeout: Optional[Any] = ..., linesize: int = ..., line_timeout: Optional[Any] = ..., mode: Optional[Any] = ..., _iter_lines: Any = ...): ...
