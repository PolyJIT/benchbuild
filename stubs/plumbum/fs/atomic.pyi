from typing import Any, Optional

def locked_file(fileno: Any, blocking: bool = ...) -> None: ...

class AtomicFile:
    CHUNK_SIZE: Any = ...
    path: Any = ...
    def __init__(self, filename: Any, ignore_deletion: bool = ...) -> None: ...
    def __del__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t: Any, v: Any, tb: Any) -> None: ...
    def close(self) -> None: ...
    def reopen(self) -> None: ...
    def locked(self, blocking: bool = ...) -> None: ...
    def delete(self) -> None: ...
    def read_atomic(self): ...
    def read_shared(self): ...
    def write_atomic(self, data: Any) -> None: ...

class AtomicCounterFile:
    atomicfile: Any = ...
    initial: Any = ...
    def __init__(self, atomicfile: Any, initial: int = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t: Any, v: Any, tb: Any) -> None: ...
    def close(self) -> None: ...
    @classmethod
    def open(cls, filename: Any): ...
    def reset(self, value: Optional[Any] = ...) -> None: ...
    def next(self): ...

class PidFileTaken(SystemExit):
    pid: Any = ...
    def __init__(self, msg: Any, pid: Any) -> None: ...

class PidFile:
    atomicfile: Any = ...
    def __init__(self, filename: Any) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, t: Any, v: Any, tb: Any) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    def acquire(self) -> None: ...
    def release(self) -> None: ...
