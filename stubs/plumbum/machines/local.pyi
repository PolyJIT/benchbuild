from functools import partial as partial
from plumbum.commands import ConcreteCommand
from plumbum.machines.base import BaseMachine, PopenAddons
from plumbum.machines.env import BaseEnv
from typing import Any, Optional

has_new_subprocess: bool

class PlumbumLocalPopen(PopenAddons):
    iter_lines: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __enter__(self): ...
    def __exit__(self, *args: Any, **kwargs: Any): ...
    def __getattr__(self, name: Any): ...

logger: Any

class LocalEnv(BaseEnv):
    CASE_SENSITIVE: Any = ...
    def __init__(self) -> None: ...
    def expand(self, expr: Any): ...
    def expanduser(self, expr: Any): ...

class LocalCommand(ConcreteCommand):
    QUOTE_LEVEL: int = ...
    def __init__(self, executable: Any, encoding: str = ...) -> None: ...
    @property
    def machine(self): ...
    def popen(self, args: Any = ..., cwd: Optional[Any] = ..., env: Optional[Any] = ..., **kwargs: Any): ...

class LocalMachine(BaseMachine):
    cwd: Any = ...
    env: Any = ...
    custom_encoding: Any = ...
    uname: Any = ...
    def __init__(self) -> None: ...
    @classmethod
    def which(cls, progname: Any): ...
    def path(self, *parts: Any): ...
    def __contains__(self, cmd: Any): ...
    def __getitem__(self, cmd: Any): ...
    def daemonic_popen(self, command: Any, cwd: str = ..., stdout: Optional[Any] = ..., stderr: Optional[Any] = ..., append: bool = ...): ...
    def list_processes(self) -> None: ...
    def list_processes(self) -> None: ...
    def pgrep(self, pattern: Any) -> None: ...
    def session(self, new_session: bool = ...): ...
    def tempdir(self) -> None: ...
    def as_user(self, username: Optional[Any] = ...): ...
    def as_root(self): ...
    python: Any = ...

local: Any
