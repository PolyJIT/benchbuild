from plumbum.machines.base import PopenAddons
from plumbum.machines.remote import BaseRemoteMachine
from typing import Any, Optional

class paramiko:
    def __nonzero__(self): ...
    __bool__: Any = ...
    def __getattr__(self, name: Any) -> None: ...

logger: Any

class ParamikoPopen(PopenAddons):
    argv: Any = ...
    channel: Any = ...
    stdin: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    custom_encoding: Any = ...
    returncode: Any = ...
    pid: Any = ...
    stdin_file: Any = ...
    stdout_file: Any = ...
    stderr_file: Any = ...
    def __init__(self, argv: Any, stdin: Any, stdout: Any, stderr: Any, encoding: Any, stdin_file: Optional[Any] = ..., stdout_file: Optional[Any] = ..., stderr_file: Optional[Any] = ...) -> None: ...
    def poll(self): ...
    def wait(self): ...
    def close(self) -> None: ...
    def kill(self) -> None: ...
    terminate: Any = ...
    def send_signal(self, sig: Any) -> None: ...
    def communicate(self): ...
    def iter_lines(self, timeout: Optional[Any] = ..., **kwargs: Any): ...
    __iter__: Any = ...

class ParamikoMachine(BaseRemoteMachine):
    class RemoteCommand(BaseRemoteMachine.RemoteCommand):
        def __or__(self, *_: Any) -> None: ...
        def __gt__(self, *_: Any) -> Any: ...
        def __rshift__(self, *_: Any) -> None: ...
        def __ge__(self, *_: Any) -> Any: ...
        def __lt__(self, *_: Any) -> Any: ...
        def __lshift__(self, *_: Any) -> None: ...
    host: Any = ...
    def __init__(self, host: Any, user: Optional[Any] = ..., port: Optional[Any] = ..., password: Optional[Any] = ..., keyfile: Optional[Any] = ..., load_system_host_keys: bool = ..., missing_host_policy: Optional[Any] = ..., encoding: str = ..., look_for_keys: Optional[Any] = ..., connect_timeout: Optional[Any] = ..., keep_alive: int = ..., gss_auth: bool = ..., gss_kex: Optional[Any] = ..., gss_deleg_creds: Optional[Any] = ..., gss_host: Optional[Any] = ..., get_pty: bool = ..., load_system_ssh_config: bool = ...) -> None: ...
    def close(self) -> None: ...
    @property
    def sftp(self): ...
    def session(self, isatty: bool = ..., term: str = ..., width: int = ..., height: int = ..., new_session: bool = ...): ...
    def popen(self, args: Any, stdin: Optional[Any] = ..., stdout: Optional[Any] = ..., stderr: Optional[Any] = ..., new_session: bool = ..., cwd: Optional[Any] = ...): ...
    def download(self, src: Any, dst: Any): ...
    def upload(self, src: Any, dst: Any): ...
    def connect_sock(self, dport: Any, dhost: str = ..., ipv6: bool = ...): ...

class SocketCompatibleChannel:
    def __init__(self, chan: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def send(self, s: Any): ...
    def recv(self, count: Any): ...
