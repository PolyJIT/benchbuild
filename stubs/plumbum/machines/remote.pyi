from plumbum.commands import ConcreteCommand
from plumbum.machines.base import BaseMachine
from plumbum.machines.env import BaseEnv
from typing import Any, Optional

class RemoteEnv(BaseEnv):
    remote: Any = ...
    def __init__(self, remote: Any) -> None: ...
    def __delitem__(self, name: Any) -> None: ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def pop(self, name: Any, *default: Any) -> None: ...
    def update(self, *args: Any, **kwargs: Any) -> None: ...
    def expand(self, expr: Any): ...
    def expanduser(self, expr: Any): ...
    def getdelta(self): ...

class RemoteCommand(ConcreteCommand):
    QUOTE_LEVEL: int = ...
    remote: Any = ...
    def __init__(self, remote: Any, executable: Any, encoding: str = ...) -> None: ...
    @property
    def machine(self): ...
    def popen(self, args: Any = ..., **kwargs: Any): ...
    def nohup(self, cwd: str = ..., stdout: str = ..., stderr: Optional[Any] = ..., append: bool = ...): ...

class ClosedRemoteMachine(Exception): ...

class ClosedRemote:
    def __init__(self, obj: Any) -> None: ...
    def close(self) -> None: ...
    def __getattr__(self, name: Any) -> None: ...

class BaseRemoteMachine(BaseMachine):
    RemoteCommand: Any = ...
    @property
    def cwd(self): ...
    custom_encoding: Any = ...
    connect_timeout: Any = ...
    uname: Any = ...
    env: Any = ...
    def __init__(self, encoding: str = ..., connect_timeout: int = ..., new_session: bool = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t: Any, v: Any, tb: Any) -> None: ...
    def close(self) -> None: ...
    def path(self, *parts: Any): ...
    def which(self, progname: Any): ...
    def __getitem__(self, cmd: Any): ...
    @property
    def python(self): ...
    def session(self, isatty: bool = ..., new_session: bool = ...) -> None: ...
    def download(self, src: Any, dst: Any) -> None: ...
    def upload(self, src: Any, dst: Any) -> None: ...
    def popen(self, args: Any, **kwargs: Any) -> None: ...
    def list_processes(self) -> None: ...
    def pgrep(self, pattern: Any) -> None: ...
    def tempdir(self) -> None: ...
    def expand(self, expr: Any): ...
    def expanduser(self, expr: Any): ...
