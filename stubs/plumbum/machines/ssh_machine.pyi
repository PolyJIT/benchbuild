from plumbum.machines.remote import BaseRemoteMachine
from typing import Any, Optional

class SshTunnel:
    def __init__(self, session: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t: Any, v: Any, tb: Any) -> None: ...
    def close(self) -> None: ...

class SshMachine(BaseRemoteMachine):
    def __init__(self, host: Any, user: Optional[Any] = ..., port: Optional[Any] = ..., keyfile: Optional[Any] = ..., ssh_command: Optional[Any] = ..., scp_command: Optional[Any] = ..., ssh_opts: Any = ..., scp_opts: Any = ..., password: Optional[Any] = ..., encoding: str = ..., connect_timeout: int = ..., new_session: bool = ...) -> None: ...
    def popen(self, args: Any, ssh_opts: Any = ..., **kwargs: Any): ...
    def nohup(self, command: Any) -> None: ...
    def daemonic_popen(self, command: Any, cwd: str = ..., stdout: Optional[Any] = ..., stderr: Optional[Any] = ..., append: bool = ...) -> None: ...
    def session(self, isatty: bool = ..., new_session: bool = ...): ...
    def tunnel(self, lport: Any, dport: Any, lhost: str = ..., dhost: str = ..., connect_timeout: int = ...): ...
    def download(self, src: Any, dst: Any) -> None: ...
    def upload(self, src: Any, dst: Any) -> None: ...

class PuttyMachine(SshMachine):
    def __init__(self, host: Any, user: Optional[Any] = ..., port: Optional[Any] = ..., keyfile: Optional[Any] = ..., ssh_command: Optional[Any] = ..., scp_command: Optional[Any] = ..., ssh_opts: Any = ..., scp_opts: Any = ..., encoding: str = ..., connect_timeout: int = ..., new_session: bool = ...) -> None: ...
    def session(self, isatty: bool = ..., new_session: bool = ...): ...
