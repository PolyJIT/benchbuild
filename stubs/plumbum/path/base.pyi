import abc
import six
from abc import abstractmethod
from typing import Any, Optional

class FSUser(int):
    name: Any = ...
    def __new__(cls, val: Any, name: Optional[Any] = ...): ...

class Path(str, six.ABC, metaclass=abc.ABCMeta):
    CASE_SENSITIVE: bool = ...
    def __div__(self, other: Any): ...
    __truediv__: Any = ...
    def __getitem__(self, key: Any): ...
    def __floordiv__(self, expr: Any): ...
    def __iter__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __nonzero__(self): ...
    __bool__: Any = ...
    def __fspath__(self): ...
    def __contains__(self, item: Any): ...
    def up(self, count: int = ...): ...
    def walk(self, filter: Any = ..., dir_filter: Any = ...): ...
    @property
    @abc.abstractmethod
    def name(self) -> Any: ...
    @property
    def basename(self): ...
    @property
    @abc.abstractmethod
    def stem(self) -> Any: ...
    @property
    @abc.abstractmethod
    def dirname(self) -> Any: ...
    @property
    @abc.abstractmethod
    def root(self) -> Any: ...
    @property
    @abc.abstractmethod
    def drive(self) -> Any: ...
    @property
    @abc.abstractmethod
    def suffix(self) -> Any: ...
    @property
    @abc.abstractmethod
    def suffixes(self) -> Any: ...
    @property
    @abc.abstractmethod
    def uid(self) -> Any: ...
    @property
    @abc.abstractmethod
    def gid(self) -> Any: ...
    @abstractmethod
    def as_uri(self, scheme: Optional[Any] = ...) -> Any: ...
    @abstractmethod
    def join(self, *parts: Any) -> Any: ...
    @abstractmethod
    def list(self) -> Any: ...
    @abstractmethod
    def iterdir(self) -> Any: ...
    @abstractmethod
    def is_dir(self) -> Any: ...
    def isdir(self): ...
    @abstractmethod
    def is_file(self) -> Any: ...
    def isfile(self): ...
    def islink(self): ...
    @abstractmethod
    def is_symlink(self) -> Any: ...
    @abstractmethod
    def exists(self) -> Any: ...
    @abstractmethod
    def stat(self) -> Any: ...
    @abstractmethod
    def with_name(self, name: Any) -> Any: ...
    @abstractmethod
    def with_suffix(self, suffix: Any, depth: int = ...) -> Any: ...
    def preferred_suffix(self, suffix: Any): ...
    @abstractmethod
    def glob(self, pattern: Any) -> Any: ...
    @abstractmethod
    def delete(self) -> Any: ...
    @abstractmethod
    def move(self, dst: Any) -> Any: ...
    def rename(self, newname: Any): ...
    @abstractmethod
    def copy(self, dst: Any, override: Optional[Any] = ...) -> Any: ...
    @abstractmethod
    def mkdir(self, mode: int = ..., parents: bool = ..., exist_ok: bool = ...) -> Any: ...
    @abstractmethod
    def open(self, mode: str = ...) -> Any: ...
    @abstractmethod
    def read(self, encoding: Optional[Any] = ...) -> Any: ...
    @abstractmethod
    def write(self, data: Any, encoding: Optional[Any] = ...) -> Any: ...
    @abstractmethod
    def touch(self) -> Any: ...
    @abstractmethod
    def chown(self, owner: Optional[Any] = ..., group: Optional[Any] = ..., recursive: Optional[Any] = ...) -> Any: ...
    @abstractmethod
    def chmod(self, mode: Any) -> Any: ...
    @abstractmethod
    def access(self, mode: int = ...) -> Any: ...
    @abstractmethod
    def link(self, dst: Any) -> Any: ...
    @abstractmethod
    def symlink(self, dst: Any) -> Any: ...
    @abstractmethod
    def unlink(self) -> Any: ...
    def split(self, *dummy_args: Any, **dummy_kargs: Any): ...
    @property
    def parts(self): ...
    def relative_to(self, source: Any): ...
    def __sub__(self, other: Any): ...
    def resolve(self, strict: bool = ...): ...
    @property
    def parents(self): ...
    @property
    def parent(self): ...

class RelativePath:
    parts: Any = ...
    def __init__(self, parts: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def __getitem__(self, index: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __nonzero__(self): ...
    __bool__: Any = ...
    def up(self, count: int = ...): ...
    def __radd__(self, path: Any): ...
