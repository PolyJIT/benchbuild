from plumbum.path.base import Path
from typing import Any, Optional

class StatRes:
    def __init__(self, tup: Any) -> None: ...
    def __getitem__(self, index: Any): ...
    st_mode: Any = ...
    mode: Any = ...
    st_ino: Any = ...
    ino: Any = ...
    st_dev: Any = ...
    dev: Any = ...
    st_nlink: Any = ...
    nlink: Any = ...
    st_uid: Any = ...
    uid: Any = ...
    st_gid: Any = ...
    gid: Any = ...
    st_size: Any = ...
    size: Any = ...
    st_atime: Any = ...
    atime: Any = ...
    st_mtime: Any = ...
    mtime: Any = ...
    st_ctime: Any = ...
    ctime: Any = ...

class RemotePath(Path):
    CASE_SENSITIVE: bool = ...
    remote: Any = ...
    def __new__(cls, remote: Any, *parts: Any): ...
    @property
    def name(self): ...
    @property
    def dirname(self): ...
    @property
    def suffix(self): ...
    @property
    def suffixes(self): ...
    @property
    def uid(self): ...
    @property
    def gid(self): ...
    def join(self, *parts: Any): ...
    def list(self): ...
    def iterdir(self): ...
    def is_dir(self): ...
    def is_file(self): ...
    def is_symlink(self): ...
    def exists(self): ...
    def stat(self): ...
    def with_name(self, name: Any): ...
    def with_suffix(self, suffix: Any, depth: int = ...): ...
    def glob(self, pattern: Any): ...
    def delete(self) -> None: ...
    unlink: Any = ...
    def move(self, dst: Any) -> None: ...
    def copy(self, dst: Any, override: bool = ...) -> None: ...
    def mkdir(self, mode: Optional[Any] = ..., parents: bool = ..., exist_ok: bool = ...) -> None: ...
    def read(self, encoding: Optional[Any] = ...): ...
    def write(self, data: Any, encoding: Optional[Any] = ...) -> None: ...
    def touch(self) -> None: ...
    def chown(self, owner: Optional[Any] = ..., group: Optional[Any] = ..., recursive: Optional[Any] = ...) -> None: ...
    def chmod(self, mode: Any) -> None: ...
    def access(self, mode: int = ...): ...
    def link(self, dst: Any) -> None: ...
    def symlink(self, dst: Any) -> None: ...
    def open(self, mode: str = ..., bufsize: int = ...): ...
    def as_uri(self, scheme: str = ...): ...
    @property
    def stem(self): ...
    @property
    def root(self): ...
    @property
    def drive(self): ...

class RemoteWorkdir(RemotePath):
    def __new__(cls, remote: Any): ...
    def __hash__(self) -> Any: ...
    def chdir(self, newdir: Any): ...
    def getpath(self): ...
    def __call__(self, newdir: Any) -> None: ...
