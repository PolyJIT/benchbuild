from collections import MutableMapping
from typing import Any, Optional

NO_DEFAULT: Any

class EnvironmentVariableError(KeyError): ...

class TypedEnv(MutableMapping):
    class _BaseVar:
        names: Any = ...
        name: Any = ...
        default: Any = ...
        def __init__(self, name: Any, default: Any = ...) -> None: ...
        def convert(self, value: Any): ...
        def __get__(self, instance: Any, owner: Any): ...
        def __set__(self, instance: Any, value: Any) -> None: ...
    class Str(_BaseVar): ...
    class Bool(_BaseVar):
        def convert(self, s: Any): ...
        def __set__(self, instance: Any, value: Any) -> None: ...
    class Int(_BaseVar):
        convert: Any = ...
    class Float(_BaseVar):
        convert: Any = ...
    class CSV(_BaseVar):
        type: Any = ...
        separator: Any = ...
        def __init__(self, name: Any, default: Any = ..., type: Any = ..., separator: str = ...) -> None: ...
        def __set__(self, instance: Any, value: Any) -> None: ...
        def convert(self, value: Any): ...
    def __init__(self, env: Any = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def __delitem__(self, name: Any) -> None: ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def __contains__(self, key: Any): ...
    def __getattr__(self, name: Any): ...
    def __getitem__(self, key: Any): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def __dir__(self): ...
