from collections import namedtuple
from typing import Any, Optional

__extra__all__: Any
PROC_STATUSES: Any
TCP_STATUSES: Any
PAGESIZE: Any
AF_LINK: Any
HAS_PER_CPU_TIMES: Any
HAS_PROC_NUM_THREADS: Any
HAS_PROC_OPEN_FILES: Any
HAS_PROC_NUM_FDS: Any
kinfo_proc_map: Any

svmem = namedtuple('svmem', ['total', 'available', 'percent', 'used', 'free', 'active', 'inactive', 'buffers', 'cached', 'shared', 'wired'])

scputimes = namedtuple('scputimes', ['user', 'nice', 'system', 'idle', 'irq'])

pmem = namedtuple('pmem', ['rss', 'vms', 'text', 'data', 'stack'])
pfullmem = pmem

pcputimes = namedtuple('pcputimes', ['user', 'system', 'children_user', 'children_system'])

pmmap_grouped = namedtuple('pmmap_grouped', 'path rss, private, ref_count, shadow_count')

pmmap_ext = namedtuple('pmmap_ext', 'addr, perms path rss, private, ref_count, shadow_count')

sdiskio = namedtuple('sdiskio', ['read_count', 'write_count', 'read_bytes', 'write_bytes', 'read_time', 'write_time', 'busy_time'])

sdiskio = namedtuple('sdiskio', ['read_count', 'write_count', 'read_bytes', 'write_bytes'])

def virtual_memory(): ...
def swap_memory(): ...
def cpu_times(): ...
def per_cpu_times(): ...
def cpu_count_logical(): ...
def cpu_count_physical(): ...
def cpu_stats(): ...
def disk_partitions(all: bool = ...): ...

disk_usage: Any
disk_io_counters: Any
net_io_counters: Any
net_if_addrs: Any

def net_if_stats(): ...
def net_connections(kind: Any): ...
def sensors_battery(): ...
def sensors_temperatures(): ...
def cpu_freq(): ...
def boot_time(): ...
def users(): ...
def pids(): ...
def pid_exists(pid: Any): ...

pid_exists: Any

def is_zombie(pid: Any): ...
def wrap_exceptions(fun: Any): ...
def wrap_exceptions_procfs(inst: Any) -> None: ...

class Process:
    pid: Any = ...
    def __init__(self, pid: Any) -> None: ...
    def oneshot(self): ...
    def oneshot_enter(self) -> None: ...
    def oneshot_exit(self) -> None: ...
    def name(self): ...
    def exe(self): ...
    def cmdline(self): ...
    def terminal(self): ...
    def ppid(self): ...
    def uids(self): ...
    def gids(self): ...
    def cpu_times(self): ...
    def cpu_num(self): ...
    def memory_info(self): ...
    memory_full_info: Any = ...
    def create_time(self): ...
    def num_threads(self): ...
    def num_ctx_switches(self): ...
    def threads(self): ...
    def connections(self, kind: str = ...): ...
    def wait(self, timeout: Optional[Any] = ...): ...
    def nice_get(self): ...
    def nice_set(self, value: Any): ...
    def status(self): ...
    def io_counters(self): ...
    def cwd(self): ...

    nt_mmap_grouped = namedtuple('mmap', 'path rss, private, ref_count, shadow_count')

    nt_mmap_ext = namedtuple('mmap', 'addr, perms path rss, private, ref_count, shadow_count')
    def open_files(self): ...
    open_files: Any = ...
    def num_fds(self): ...
    num_fds: Any = ...
    def cpu_affinity_get(self): ...
    def cpu_affinity_set(self, cpus: Any) -> None: ...
    def memory_maps(self): ...
