import enum
from ._common import ENCODING_ERRS as ENCODING_ERRS
from collections import namedtuple
from typing import Any, Optional

msg: str
__extra__all__: Any
CONN_DELETE_TCB: str
ERROR_PARTIAL_COPY: int
PYPY: Any
AF_LINK: int
AddressFamily: Any
TCP_STATUSES: Any

class Priority(enum.IntEnum):
    ABOVE_NORMAL_PRIORITY_CLASS: Any = ...
    BELOW_NORMAL_PRIORITY_CLASS: Any = ...
    HIGH_PRIORITY_CLASS: Any = ...
    IDLE_PRIORITY_CLASS: Any = ...
    NORMAL_PRIORITY_CLASS: Any = ...
    REALTIME_PRIORITY_CLASS: Any = ...

IOPRIO_VERYLOW: int
IOPRIO_LOW: int
IOPRIO_NORMAL: int
IOPRIO_HIGH: int

class IOPriority(enum.IntEnum):
    IOPRIO_VERYLOW: int = ...
    IOPRIO_LOW: int = ...
    IOPRIO_NORMAL: int = ...
    IOPRIO_HIGH: int = ...

pinfo_map: Any

scputimes = namedtuple('scputimes', ['user', 'system', 'idle', 'interrupt', 'dpc'])

svmem = namedtuple('svmem', ['total', 'available', 'percent', 'used', 'free'])

pmem = namedtuple('pmem', ['rss', 'vms', 'num_page_faults', 'peak_wset', 'wset', 'peak_paged_pool', 'paged_pool', 'peak_nonpaged_pool', 'nonpaged_pool', 'pagefile', 'peak_pagefile', 'private'])

pfullmem: Any
pmmap_grouped = namedtuple('pmmap_grouped', ['path', 'rss'])

pmmap_ext: Any
pio = namedtuple('pio', ['read_count', 'write_count', 'read_bytes', 'write_bytes', 'other_count', 'other_bytes'])

def convert_dos_path(s: Any): ...
def py2_strencode(s: Any): ...
def getpagesize(): ...
def virtual_memory(): ...
def swap_memory(): ...

disk_io_counters: Any

def disk_usage(path: Any): ...
def disk_partitions(all: Any): ...
def cpu_times(): ...
def per_cpu_times(): ...
def cpu_count_logical(): ...
def cpu_count_physical(): ...
def cpu_stats(): ...
def cpu_freq(): ...
def getloadavg(): ...
def net_connections(kind: Any, _pid: int = ...): ...
def net_if_stats(): ...
def net_io_counters(): ...
def net_if_addrs(): ...
def sensors_battery(): ...
def boot_time(): ...
def users(): ...
def win_service_iter() -> None: ...
def win_service_get(name: Any): ...

class WindowsService:
    def __init__(self, name: Any, display_name: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def name(self): ...
    def display_name(self): ...
    def binpath(self): ...
    def username(self): ...
    def start_type(self): ...
    def pid(self): ...
    def status(self): ...
    def description(self): ...
    def as_dict(self): ...

pids: Any
pid_exists: Any
ppid_map: Any

def is_permission_err(exc: Any): ...
def convert_oserror(exc: Any, pid: Optional[Any] = ..., name: Optional[Any] = ...): ...
def wrap_exceptions(fun: Any): ...
def retry_error_partial_copy(fun: Any): ...

class Process:
    pid: Any = ...
    def __init__(self, pid: Any) -> None: ...
    def oneshot_enter(self) -> None: ...
    def oneshot_exit(self) -> None: ...
    def name(self): ...
    def exe(self): ...
    def cmdline(self): ...
    def environ(self): ...
    def ppid(self): ...
    def memory_info(self): ...
    def memory_full_info(self): ...
    def memory_maps(self) -> None: ...
    def kill(self): ...
    def send_signal(self, sig: Any) -> None: ...
    def wait(self, timeout: Optional[Any] = ...): ...
    def username(self): ...
    def create_time(self): ...
    def num_threads(self): ...
    def threads(self): ...
    def cpu_times(self): ...
    def suspend(self) -> None: ...
    def resume(self) -> None: ...
    def cwd(self): ...
    def open_files(self): ...
    def connections(self, kind: str = ...): ...
    def nice_get(self): ...
    def nice_set(self, value: Any): ...
    def ionice_get(self): ...
    def ionice_set(self, ioclass: Any, value: Any) -> None: ...
    def io_counters(self): ...
    def status(self): ...
    def cpu_affinity_get(self): ...
    def cpu_affinity_set(self, value: Any): ...
    def num_handles(self): ...
    def num_ctx_switches(self): ...
