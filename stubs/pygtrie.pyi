import collections as _abc
from typing import Any, Optional

class ShortKeyError(KeyError): ...

class _NoChildren:
    def __bool__(self): ...
    __nonzero__: Any = ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    iteritems: Any = ...
    sorted_items: Any = ...
    def __next__(self) -> None: ...
    next: Any = ...
    def get(self, _step: Any) -> None: ...
    def add(self, parent: Any, step: Any): ...
    require: Any = ...
    def copy(self, _make_copy: Any, _queue: Any): ...
    def __deepcopy__(self, memo: Any): ...

class _OneChild:
    step: Any = ...
    node: Any = ...
    def __init__(self, step: Any, node: Any) -> None: ...
    def __bool__(self): ...
    __nonzero__: Any = ...
    def __len__(self): ...
    def sorted_items(self): ...
    def iteritems(self): ...
    def get(self, step: Any): ...
    def add(self, parent: Any, step: Any): ...
    def require(self, parent: Any, step: Any): ...
    def delete(self, parent: Any, _step: Any) -> None: ...
    def pick_child(self): ...
    def copy(self, make_copy: Any, queue: Any): ...

class _Children(dict):
    def __init__(self, *items: Any) -> None: ...
    def sorted_items(self): ...
    def sorted_items(self): ...
    def iteritems(self): ...
    def add(self, _parent: Any, step: Any): ...
    def require(self, _parent: Any, step: Any): ...
    def delete(self, parent: Any, step: Any) -> None: ...
    def pick_child(self): ...
    def copy(self, make_copy: Any, queue: Any): ...

class _Node:
    children: Any = ...
    value: Any = ...
    def __init__(self) -> None: ...
    def iterate(self, path: Any, shallow: Any, iteritems: Any) -> None: ...
    def traverse(self, node_factory: Any, path_conv: Any, path: Any, iteritems: Any): ...
    def equals(self, other: Any): ...
    __bool__: Any = ...
    __nonzero__: Any = ...
    __hash__: Any = ...
    def shallow_copy(self, make_copy: Any): ...
    def copy(self, make_copy: Any): ...

class Trie(_abc.MutableMapping):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def enable_sorting(self, enable: bool = ...) -> None: ...
    def clear(self) -> None: ...
    def update(self, *args: Any, **kwargs: Any) -> None: ...
    def copy(self, __make_copy: Any = ...): ...
    def __copy__(self): ...
    def __deepcopy__(self, memo: Any): ...
    @classmethod
    def fromkeys(cls, keys: Any, value: Optional[Any] = ...): ...
    def __iter__(self) -> Any: ...
    def iteritems(self, prefix: Any = ..., shallow: bool = ...) -> None: ...
    def iterkeys(self, prefix: Any = ..., shallow: bool = ...) -> None: ...
    def itervalues(self, prefix: Any = ..., shallow: bool = ...) -> None: ...
    def items(self, prefix: Any = ..., shallow: bool = ...): ...
    def keys(self, prefix: Any = ..., shallow: bool = ...): ...
    def values(self, prefix: Any = ..., shallow: bool = ...): ...
    def __len__(self): ...
    def __bool__(self): ...
    __nonzero__: Any = ...
    __hash__: Any = ...
    HAS_VALUE: int = ...
    HAS_SUBTRIE: int = ...
    def has_node(self, key: Any): ...
    def has_key(self, key: Any): ...
    def has_subtrie(self, key: Any): ...
    def __getitem__(self, key_or_slice: Any): ...
    def __setitem__(self, key_or_slice: Any, value: Any) -> None: ...
    def setdefault(self, key: Any, value: Optional[Any] = ...): ...
    def pop(self, key: Any, default: Any = ...): ...
    def popitem(self): ...
    def __delitem__(self, key_or_slice: Any) -> None: ...
    class _NoneStep:
        def __bool__(self): ...
        __nonzero__: Any = ...
        def get(self, default: Optional[Any] = ...): ...
        is_set: Any = ...
        has_subtrie: Any = ...
        key: Any = ...
        value: Any = ...
        def __getitem__(self, index: Any): ...
    class _Step(_NoneStep):
        def __init__(self, trie: Any, path: Any, pos: Any, node: Any) -> None: ...
        def __bool__(self): ...
        __nonzero__: Any = ...
        @property
        def is_set(self): ...
        @property
        def has_subtrie(self): ...
        def get(self, default: Optional[Any] = ...): ...
        def set(self, value: Any) -> None: ...
        def setdefault(self, value: Any): ...
        @property
        def key(self): ...
        @property
        def value(self): ...
        @value.setter
        def value(self, value: Any) -> None: ...
    def walk_towards(self, key: Any) -> None: ...
    def prefixes(self, key: Any) -> None: ...
    def shortest_prefix(self, key: Any): ...
    def longest_prefix(self, key: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def traverse(self, node_factory: Any, prefix: Any = ...): ...

class CharTrie(Trie): ...

class StringTrie(Trie):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def fromkeys(cls, keys: Any, value: Optional[Any] = ..., separator: str = ...): ...

class PrefixSet(_abc.MutableSet):
    def __init__(self, iterable: Any = ..., factory: Any = ..., **kwargs: Any) -> None: ...
    def copy(self): ...
    def __copy__(self): ...
    def __deepcopy__(self, memo: Any): ...
    def clear(self) -> None: ...
    def __contains__(self, key: Any): ...
    def __iter__(self) -> Any: ...
    def iter(self, prefix: Any = ...): ...
    def __len__(self): ...
    def add(self, value: Any) -> None: ...
    def discard(self, value: Any) -> None: ...
    def remove(self, value: Any) -> None: ...
    def pop(self) -> None: ...
