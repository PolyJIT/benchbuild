from ... import types as sqltypes
from .base import ENUM, PGCompiler, PGDialect, PGExecutionContext, PGIdentifierPreparer, UUID
from .hstore import HSTORE
from .json import JSON, JSONB
from typing import Any, Optional

logger: Any

class _PGNumeric(sqltypes.Numeric):
    def bind_processor(self, dialect: Any) -> None: ...
    def result_processor(self, dialect: Any, coltype: Any): ...

class _PGEnum(ENUM):
    def result_processor(self, dialect: Any, coltype: Any): ...

class _PGHStore(HSTORE):
    def bind_processor(self, dialect: Any): ...
    def result_processor(self, dialect: Any, coltype: Any): ...

class _PGJSON(JSON):
    def result_processor(self, dialect: Any, coltype: Any): ...

class _PGJSONB(JSONB):
    def result_processor(self, dialect: Any, coltype: Any): ...

class _PGUUID(UUID):
    def bind_processor(self, dialect: Any): ...
    def result_processor(self, dialect: Any, coltype: Any): ...

class PGExecutionContext_psycopg2(PGExecutionContext):
    def create_server_side_cursor(self): ...
    def get_result_proxy(self): ...

class PGCompiler_psycopg2(PGCompiler): ...
class PGIdentifierPreparer_psycopg2(PGIdentifierPreparer): ...

EXECUTEMANY_DEFAULT: Any
EXECUTEMANY_BATCH: Any
EXECUTEMANY_VALUES: Any

class PGDialect_psycopg2(PGDialect):
    driver: str = ...
    supports_unicode_statements: bool = ...
    supports_server_side_cursors: bool = ...
    default_paramstyle: str = ...
    supports_sane_multi_rowcount: bool = ...
    execution_ctx_cls: Any = ...
    statement_compiler: Any = ...
    preparer: Any = ...
    psycopg2_version: Any = ...
    FEATURE_VERSION_MAP: Any = ...
    engine_config_types: Any = ...
    colspecs: Any = ...
    server_side_cursors: Any = ...
    use_native_unicode: Any = ...
    use_native_hstore: Any = ...
    use_native_uuid: Any = ...
    supports_unicode_binds: Any = ...
    client_encoding: Any = ...
    executemany_mode: Any = ...
    executemany_batch_page_size: Any = ...
    executemany_values_page_size: Any = ...
    def __init__(self, server_side_cursors: bool = ..., use_native_unicode: bool = ..., client_encoding: Optional[Any] = ..., use_native_hstore: bool = ..., use_native_uuid: bool = ..., executemany_mode: Optional[Any] = ..., executemany_batch_page_size: Optional[Any] = ..., executemany_values_page_size: Optional[Any] = ..., use_batch_mode: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def initialize(self, connection: Any) -> None: ...
    @classmethod
    def dbapi(cls): ...
    def set_isolation_level(self, connection: Any, level: Any) -> None: ...
    def on_connect(self): ...
    def do_executemany(self, cursor: Any, statement: Any, parameters: Any, context: Optional[Any] = ...) -> None: ...
    def create_connect_args(self, url: Any): ...
    def is_disconnect(self, e: Any, connection: Any, cursor: Any): ...
dialect = PGDialect_psycopg2
