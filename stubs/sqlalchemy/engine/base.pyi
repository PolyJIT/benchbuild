from .. import log
from .interfaces import Connectable, ExceptionContext
from typing import Any, Optional

class Connection(Connectable):
    schema_for_object: Any = ...
    engine: Any = ...
    dialect: Any = ...
    should_close_with_result: bool = ...
    dispatch: Any = ...
    def __init__(self, engine: Any, connection: Optional[Any] = ..., close_with_result: bool = ..., _branch_from: Optional[Any] = ..., _execution_options: Optional[Any] = ..., _dispatch: Optional[Any] = ..., _has_events: Optional[Any] = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type_: Any, value: Any, traceback: Any) -> None: ...
    def execution_options(self, **opt: Any): ...
    def get_execution_options(self): ...
    @property
    def closed(self): ...
    @property
    def invalidated(self): ...
    @property
    def connection(self): ...
    def get_isolation_level(self): ...
    @property
    def default_isolation_level(self): ...
    @property
    def info(self): ...
    def connect(self): ...
    def invalidate(self, exception: Optional[Any] = ...) -> None: ...
    def detach(self) -> None: ...
    def begin(self): ...
    def begin_nested(self): ...
    def begin_twophase(self, xid: Optional[Any] = ...): ...
    def recover_twophase(self): ...
    def rollback_prepared(self, xid: Any, recover: bool = ...) -> None: ...
    def commit_prepared(self, xid: Any, recover: bool = ...) -> None: ...
    def in_transaction(self): ...
    def close(self) -> None: ...
    def scalar(self, object_: Any, *multiparams: Any, **params: Any): ...
    def execute(self, object_: Any, *multiparams: Any, **params: Any): ...
    def transaction(self, callable_: Any, *args: Any, **kwargs: Any): ...
    def run_callable(self, callable_: Any, *args: Any, **kwargs: Any): ...

class ExceptionContextImpl(ExceptionContext):
    engine: Any = ...
    connection: Any = ...
    sqlalchemy_exception: Any = ...
    original_exception: Any = ...
    execution_context: Any = ...
    statement: Any = ...
    parameters: Any = ...
    is_disconnect: Any = ...
    invalidate_pool_on_disconnect: Any = ...
    def __init__(self, exception: Any, sqlalchemy_exception: Any, engine: Any, connection: Any, cursor: Any, statement: Any, parameters: Any, context: Any, is_disconnect: Any, invalidate_pool_on_disconnect: Any) -> None: ...

class Transaction:
    connection: Any = ...
    is_active: bool = ...
    def __init__(self, connection: Any, parent: Any) -> None: ...
    def close(self) -> None: ...
    def rollback(self) -> None: ...
    def commit(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type_: Any, value: Any, traceback: Any) -> None: ...

class RootTransaction(Transaction):
    def __init__(self, connection: Any) -> None: ...

class NestedTransaction(Transaction):
    def __init__(self, connection: Any, parent: Any) -> None: ...

class TwoPhaseTransaction(Transaction):
    xid: Any = ...
    def __init__(self, connection: Any, xid: Any) -> None: ...
    def prepare(self) -> None: ...

class Engine(Connectable, log.Identified):
    schema_for_object: Any = ...
    pool: Any = ...
    url: Any = ...
    dialect: Any = ...
    logging_name: Any = ...
    echo: Any = ...
    hide_parameters: Any = ...
    def __init__(self, pool: Any, dialect: Any, url: Any, logging_name: Optional[Any] = ..., echo: Optional[Any] = ..., proxy: Optional[Any] = ..., execution_options: Optional[Any] = ..., hide_parameters: bool = ...) -> None: ...
    @property
    def engine(self): ...
    def update_execution_options(self, **opt: Any) -> None: ...
    def execution_options(self, **opt: Any): ...
    def get_execution_options(self): ...
    @property
    def name(self): ...
    @property
    def driver(self): ...
    def dispose(self) -> None: ...
    class _trans_ctx:
        conn: Any = ...
        transaction: Any = ...
        close_with_result: Any = ...
        def __init__(self, conn: Any, transaction: Any, close_with_result: Any) -> None: ...
        def __enter__(self): ...
        def __exit__(self, type_: Any, value: Any, traceback: Any) -> None: ...
    def begin(self, close_with_result: bool = ...): ...
    def transaction(self, callable_: Any, *args: Any, **kwargs: Any): ...
    def run_callable(self, callable_: Any, *args: Any, **kwargs: Any): ...
    def execute(self, statement: Any, *multiparams: Any, **params: Any): ...
    def scalar(self, statement: Any, *multiparams: Any, **params: Any): ...
    def connect(self, **kwargs: Any): ...
    def contextual_connect(self, close_with_result: bool = ..., **kwargs: Any): ...
    def table_names(self, schema: Optional[Any] = ..., connection: Optional[Any] = ...): ...
    def has_table(self, table_name: Any, schema: Optional[Any] = ...): ...
    def raw_connection(self, _connection: Optional[Any] = ...): ...

class OptionEngine(Engine):
    url: Any = ...
    dialect: Any = ...
    logging_name: Any = ...
    echo: Any = ...
    hide_parameters: Any = ...
    dispatch: Any = ...
    def __init__(self, proxied: Any, execution_options: Any) -> None: ...
    pool: Any = ...
