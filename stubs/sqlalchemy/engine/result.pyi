from sqlalchemy.cresultproxy import BaseRowProxy
from typing import Any, Optional

def rowproxy_reconstructor(cls, state: Any): ...

class BaseRowProxy:
    def __init__(self, parent: Any, row: Any, processors: Any, keymap: Any) -> None: ...
    def __reduce__(self): ...
    def values(self): ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def __getitem__(self, key: Any): ...
    def __getattr__(self, name: Any): ...

class RowProxy(BaseRowProxy):
    def __contains__(self, key: Any): ...
    __hash__: Any = ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def has_key(self, key: Any): ...
    def items(self): ...
    def keys(self): ...
    def iterkeys(self): ...
    def itervalues(self): ...
    def values(self): ...

class ResultMetaData:
    case_sensitive: Any = ...
    matched_on_name: bool = ...
    def __init__(self, parent: Any, cursor_description: Any) -> None: ...

class ResultProxy:
    out_parameters: Any = ...
    closed: bool = ...
    context: Any = ...
    dialect: Any = ...
    cursor: Any = ...
    connection: Any = ...
    def __init__(self, context: Any) -> None: ...
    def keys(self): ...
    def rowcount(self): ...
    @property
    def lastrowid(self): ...
    @property
    def returns_rows(self): ...
    @property
    def is_insert(self): ...
    def close(self) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    next: Any = ...
    def inserted_primary_key(self): ...
    def last_updated_params(self): ...
    def last_inserted_params(self): ...
    @property
    def returned_defaults(self): ...
    def lastrow_has_defaults(self): ...
    def postfetch_cols(self): ...
    def prefetch_cols(self): ...
    def supports_sane_rowcount(self): ...
    def supports_sane_multi_rowcount(self): ...
    def process_rows(self, rows: Any): ...
    def fetchall(self): ...
    def fetchmany(self, size: Optional[Any] = ...): ...
    def fetchone(self): ...
    def first(self): ...
    def scalar(self): ...

class BufferedRowResultProxy(ResultProxy):
    size_growth: Any = ...

class FullyBufferedResultProxy(ResultProxy): ...

class BufferedColumnRow(RowProxy):
    def __init__(self, parent: Any, row: Any, processors: Any, keymap: Any) -> None: ...

class BufferedColumnResultProxy(ResultProxy):
    def fetchall(self): ...
    def fetchmany(self, size: Optional[Any] = ...): ...
