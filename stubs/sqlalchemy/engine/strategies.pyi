from . import base
from typing import Any

strategies: Any

class EngineStrategy:
    def __init__(self) -> None: ...
    def create(self, *args: Any, **kwargs: Any) -> None: ...

class DefaultEngineStrategy(EngineStrategy):
    def create(self, name_or_url: Any, **kwargs: Any): ...

class PlainEngineStrategy(DefaultEngineStrategy):
    name: str = ...
    engine_cls: Any = ...

class ThreadLocalEngineStrategy(DefaultEngineStrategy):
    name: str = ...
    engine_cls: Any = ...

class MockEngineStrategy(EngineStrategy):
    name: str = ...
    def create(self, name_or_url: Any, executor: Any, **kwargs: Any): ...
    class MockConnection(base.Connectable):
        def __init__(self, dialect: Any, execute: Any) -> None: ...
        engine: Any = ...
        dialect: Any = ...
        name: Any = ...
        schema_for_object: Any = ...
        def contextual_connect(self, **kwargs: Any): ...
        def connect(self, **kwargs: Any): ...
        def execution_options(self, **kw: Any): ...
        def compiler(self, statement: Any, parameters: Any, **kwargs: Any): ...
        def create(self, entity: Any, **kwargs: Any) -> None: ...
        def drop(self, entity: Any, **kwargs: Any) -> None: ...
        def execute(self, object_: Any, *multiparams: Any, **params: Any) -> None: ...
