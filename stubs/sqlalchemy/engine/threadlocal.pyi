from . import base
from typing import Any, Optional

class TLConnection(base.Connection):
    def __init__(self, *arg: Any, **kw: Any) -> None: ...
    def close(self) -> None: ...

class TLEngine(base.Engine):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def contextual_connect(self, **kw: Any): ...
    def begin_twophase(self, xid: Optional[Any] = ...): ...
    def begin_nested(self): ...
    def begin(self): ...
    def __enter__(self): ...
    def __exit__(self, type_: Any, value: Any, traceback: Any) -> None: ...
    def prepare(self) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def dispose(self) -> None: ...
    @property
    def closed(self): ...
    def close(self) -> None: ...
