from ...orm import interfaces
from typing import Any, Optional

def instrument_declarative(cls, registry: Any, metadata: Any) -> None: ...
def has_inherited_table(cls): ...

class DeclarativeMeta(type):
    def __init__(cls, classname: Any, bases: Any, dict_: Any) -> None: ...
    def __setattr__(cls, key: Any, value: Any) -> None: ...
    def __delattr__(cls, key: Any) -> None: ...

def synonym_for(name: Any, map_column: bool = ...): ...
def comparable_using(comparator_factory: Any): ...

class declared_attr(interfaces._MappedAttribute, property):
    __doc__: Any = ...
    def __init__(self, fget: Any, cascading: bool = ...) -> None: ...
    def __get__(desc: Any, self: Any, cls: Any): ...
    def cascading(cls): ...

class _stateful_declared_attr(declared_attr):
    kw: Any = ...
    def __init__(self, **kw: Any) -> None: ...
    def __call__(self, fn: Any): ...

def declarative_base(bind: Optional[Any] = ..., metadata: Optional[Any] = ..., mapper: Optional[Any] = ..., cls: Any = ..., name: str = ..., constructor: Any = ..., class_registry: Optional[Any] = ..., metaclass: Any = ...): ...
def as_declarative(**kw: Any): ...

class ConcreteBase:
    @classmethod
    def __declare_first__(cls) -> None: ...

class AbstractConcreteBase(ConcreteBase):
    __no_table__: bool = ...
    @classmethod
    def __declare_first__(cls) -> None: ...

class DeferredReflection:
    @classmethod
    def prepare(cls, engine: Any) -> None: ...
