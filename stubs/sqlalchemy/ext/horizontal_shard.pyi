from ..orm.query import Query
from ..orm.session import Session
from typing import Any, Optional

class ShardedQuery(Query):
    id_chooser: Any = ...
    query_chooser: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_shard(self, shard_id: Any): ...

class ShardedResult:
    result_proxies: Any = ...
    aggregate_rowcount: Any = ...
    def __init__(self, result_proxies: Any, aggregate_rowcount: Any) -> None: ...
    @property
    def rowcount(self): ...

class ShardedSession(Session):
    shard_chooser: Any = ...
    id_chooser: Any = ...
    query_chooser: Any = ...
    connection_callable: Any = ...
    def __init__(self, shard_chooser: Any, id_chooser: Any, query_chooser: Any, shards: Optional[Any] = ..., query_cls: Any = ..., **kwargs: Any) -> None: ...
    def connection(self, mapper: Optional[Any] = ..., instance: Optional[Any] = ..., shard_id: Optional[Any] = ..., **kwargs: Any): ...
    def get_bind(self, mapper: Any, shard_id: Optional[Any] = ..., instance: Optional[Any] = ..., clause: Optional[Any] = ..., **kw: Any): ...
    def bind_shard(self, shard_id: Any, bind: Any) -> None: ...
