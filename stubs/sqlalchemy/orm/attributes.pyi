from . import interfaces
from .base import NON_PERSISTENT_OK as NON_PERSISTENT_OK, NO_CHANGE as NO_CHANGE, PASSIVE_CLASS_MISMATCH as PASSIVE_CLASS_MISMATCH, PASSIVE_NO_FETCH_RELATED as PASSIVE_NO_FETCH_RELATED, RELATED_OBJECT_OK as RELATED_OBJECT_OK, SQL_OK as SQL_OK
from collections import namedtuple
from typing import Any, Optional

class QueryableAttribute(interfaces._MappedAttribute, interfaces.InspectionAttr, interfaces.PropComparator):
    is_attribute: bool = ...
    class_: Any = ...
    key: Any = ...
    impl: Any = ...
    comparator: Any = ...
    def __init__(self, class_: Any, key: Any, impl: Optional[Any] = ..., comparator: Optional[Any] = ..., parententity: Optional[Any] = ..., of_type: Optional[Any] = ...) -> None: ...
    def get_history(self, instance: Any, passive: Any = ...): ...
    def __selectable__(self): ...
    def info(self): ...
    def parent(self): ...
    @property
    def expression(self): ...
    def __clause_element__(self): ...
    def adapt_to_entity(self, adapt_to_entity: Any): ...
    def of_type(self, cls: Any): ...
    def label(self, name: Any): ...
    def operate(self, op: Any, *other: Any, **kwargs: Any): ...
    def reverse_operate(self, op: Any, other: Any, **kwargs: Any): ...
    def hasparent(self, state: Any, optimistic: bool = ...): ...
    def __getattr__(self, key: Any): ...
    def property(self): ...

class InstrumentedAttribute(QueryableAttribute):
    def __set__(self, instance: Any, value: Any) -> None: ...
    def __delete__(self, instance: Any) -> None: ...
    def __get__(self, instance: Any, owner: Any): ...

def create_proxied_attribute(descriptor: Any): ...

OP_REMOVE: Any
OP_APPEND: Any
OP_REPLACE: Any
OP_BULK_REPLACE: Any
OP_MODIFIED: Any

class Event:
    impl: Any = ...
    op: Any = ...
    parent_token: Any = ...
    def __init__(self, attribute_impl: Any, op: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def key(self): ...
    def hasparent(self, state: Any): ...

class AttributeImpl:
    class_: Any = ...
    key: Any = ...
    callable_: Any = ...
    dispatch: Any = ...
    trackparent: Any = ...
    parent_token: Any = ...
    send_modified_events: Any = ...
    is_equal: Any = ...
    accepts_scalar_loader: Any = ...
    expire_missing: Any = ...
    def __init__(self, class_: Any, key: Any, callable_: Any, dispatch: Any, trackparent: bool = ..., extension: Optional[Any] = ..., compare_function: Optional[Any] = ..., active_history: bool = ..., parent_token: Optional[Any] = ..., expire_missing: bool = ..., send_modified_events: bool = ..., accepts_scalar_loader: Optional[Any] = ..., **kwargs: Any) -> None: ...
    active_history: Any = ...
    def hasparent(self, state: Any, optimistic: bool = ...): ...
    def sethasparent(self, state: Any, parent_state: Any, value: Any) -> None: ...
    def get_history(self, state: Any, dict_: Any, passive: Any = ...) -> None: ...
    def get_all_pending(self, state: Any, dict_: Any, passive: Any = ...) -> None: ...
    def initialize(self, state: Any, dict_: Any): ...
    def get(self, state: Any, dict_: Any, passive: Any = ...): ...
    def append(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ...) -> None: ...
    def remove(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ...) -> None: ...
    def pop(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ...) -> None: ...
    def set(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ..., check_old: Optional[Any] = ..., pop: bool = ...) -> None: ...
    def get_committed_value(self, state: Any, dict_: Any, passive: Any = ...): ...
    def set_committed_value(self, state: Any, dict_: Any, value: Any): ...

class ScalarAttributeImpl(AttributeImpl):
    default_accepts_scalar_loader: bool = ...
    uses_objects: bool = ...
    supports_population: bool = ...
    collection: bool = ...
    dynamic: bool = ...
    def __init__(self, *arg: Any, **kw: Any) -> None: ...
    def delete(self, state: Any, dict_: Any) -> None: ...
    def get_history(self, state: Any, dict_: Any, passive: Any = ...): ...
    def set(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ..., check_old: Optional[Any] = ..., pop: bool = ...) -> None: ...
    def fire_replace_event(self, state: Any, dict_: Any, value: Any, previous: Any, initiator: Any): ...
    def fire_remove_event(self, state: Any, dict_: Any, value: Any, initiator: Any) -> None: ...
    @property
    def type(self) -> None: ...

class ScalarObjectAttributeImpl(ScalarAttributeImpl):
    default_accepts_scalar_loader: bool = ...
    uses_objects: bool = ...
    supports_population: bool = ...
    collection: bool = ...
    def delete(self, state: Any, dict_: Any) -> None: ...
    def get_history(self, state: Any, dict_: Any, passive: Any = ...): ...
    def get_all_pending(self, state: Any, dict_: Any, passive: Any = ...): ...
    def set(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ..., check_old: Optional[Any] = ..., pop: bool = ...) -> None: ...
    def fire_remove_event(self, state: Any, dict_: Any, value: Any, initiator: Any) -> None: ...
    def fire_replace_event(self, state: Any, dict_: Any, value: Any, previous: Any, initiator: Any): ...

class CollectionAttributeImpl(AttributeImpl):
    default_accepts_scalar_loader: bool = ...
    uses_objects: bool = ...
    supports_population: bool = ...
    collection: bool = ...
    dynamic: bool = ...
    copy: Any = ...
    collection_factory: Any = ...
    def __init__(self, class_: Any, key: Any, callable_: Any, dispatch: Any, typecallable: Optional[Any] = ..., trackparent: bool = ..., extension: Optional[Any] = ..., copy_function: Optional[Any] = ..., compare_function: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def get_history(self, state: Any, dict_: Any, passive: Any = ...): ...
    def get_all_pending(self, state: Any, dict_: Any, passive: Any = ...): ...
    def fire_append_event(self, state: Any, dict_: Any, value: Any, initiator: Any): ...
    def fire_pre_remove_event(self, state: Any, dict_: Any, initiator: Any) -> None: ...
    def fire_remove_event(self, state: Any, dict_: Any, value: Any, initiator: Any) -> None: ...
    def delete(self, state: Any, dict_: Any) -> None: ...
    def initialize(self, state: Any, dict_: Any): ...
    def append(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ...) -> None: ...
    def remove(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ...) -> None: ...
    def pop(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ...) -> None: ...
    def set(self, state: Any, dict_: Any, value: Any, initiator: Optional[Any] = ..., passive: Any = ..., pop: bool = ..., _adapt: bool = ...) -> None: ...
    def set_committed_value(self, state: Any, dict_: Any, value: Any): ...
    def get_collection(self, state: Any, dict_: Any, user_data: Optional[Any] = ..., passive: Any = ...): ...

def backref_listeners(attribute: Any, key: Any, uselist: Any): ...

History = namedtuple('History', ['added', 'unchanged', 'deleted'])

class History(History):
    def __bool__(self): ...
    __nonzero__: Any = ...
    def empty(self): ...
    def sum(self): ...
    def non_deleted(self): ...
    def non_added(self): ...
    def has_changes(self): ...
    def as_state(self): ...
    @classmethod
    def from_scalar_attribute(cls, attribute: Any, state: Any, current: Any): ...
    @classmethod
    def from_object_attribute(cls, attribute: Any, state: Any, current: Any): ...
    @classmethod
    def from_collection(cls, attribute: Any, state: Any, current: Any): ...

HISTORY_BLANK: Any

def get_history(obj: Any, key: Any, passive: Any = ...): ...
def get_state_history(state: Any, key: Any, passive: Any = ...): ...
def has_parent(cls, obj: Any, key: Any, optimistic: bool = ...): ...
def register_attribute(class_: Any, key: Any, **kw: Any): ...
def register_attribute_impl(class_: Any, key: Any, uselist: bool = ..., callable_: Optional[Any] = ..., useobject: bool = ..., impl_class: Optional[Any] = ..., backref: Optional[Any] = ..., **kw: Any): ...
def register_descriptor(class_: Any, key: Any, comparator: Optional[Any] = ..., parententity: Optional[Any] = ..., doc: Optional[Any] = ...): ...
def unregister_attribute(class_: Any, key: Any) -> None: ...
def init_collection(obj: Any, key: Any): ...
def init_state_collection(state: Any, dict_: Any, key: Any): ...
def set_committed_value(instance: Any, key: Any, value: Any) -> None: ...
def set_attribute(instance: Any, key: Any, value: Any, initiator: Optional[Any] = ...) -> None: ...
def get_attribute(instance: Any, key: Any): ...
def del_attribute(instance: Any, key: Any) -> None: ...
def flag_modified(instance: Any, key: Any) -> None: ...
def flag_dirty(instance: Any) -> None: ...
