from typing import Any

class MapperExtension:
    def instrument_class(self, mapper: Any, class_: Any): ...
    def init_instance(self, mapper: Any, class_: Any, oldinit: Any, instance: Any, args: Any, kwargs: Any): ...
    def init_failed(self, mapper: Any, class_: Any, oldinit: Any, instance: Any, args: Any, kwargs: Any): ...
    def reconstruct_instance(self, mapper: Any, instance: Any): ...
    def before_insert(self, mapper: Any, connection: Any, instance: Any): ...
    def after_insert(self, mapper: Any, connection: Any, instance: Any): ...
    def before_update(self, mapper: Any, connection: Any, instance: Any): ...
    def after_update(self, mapper: Any, connection: Any, instance: Any): ...
    def before_delete(self, mapper: Any, connection: Any, instance: Any): ...
    def after_delete(self, mapper: Any, connection: Any, instance: Any): ...

class SessionExtension:
    def before_commit(self, session: Any) -> None: ...
    def after_commit(self, session: Any) -> None: ...
    def after_rollback(self, session: Any) -> None: ...
    def before_flush(self, session: Any, flush_context: Any, instances: Any) -> None: ...
    def after_flush(self, session: Any, flush_context: Any) -> None: ...
    def after_flush_postexec(self, session: Any, flush_context: Any) -> None: ...
    def after_begin(self, session: Any, transaction: Any, connection: Any) -> None: ...
    def after_attach(self, session: Any, instance: Any) -> None: ...
    def after_bulk_update(self, session: Any, query: Any, query_context: Any, result: Any) -> None: ...
    def after_bulk_delete(self, session: Any, query: Any, query_context: Any, result: Any) -> None: ...

class AttributeExtension:
    active_history: bool = ...
    def append(self, state: Any, value: Any, initiator: Any): ...
    def remove(self, state: Any, value: Any, initiator: Any) -> None: ...
    def set(self, state: Any, value: Any, oldvalue: Any, initiator: Any): ...
