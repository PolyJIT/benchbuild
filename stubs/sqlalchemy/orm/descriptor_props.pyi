from . import query
from .interfaces import MapperProperty, PropComparator
from typing import Any, Optional

class DescriptorProperty(MapperProperty):
    doc: Any = ...
    uses_objects: bool = ...
    key: Any = ...
    descriptor: Any = ...
    def instrument_class(self, mapper: Any): ...

class CompositeProperty(DescriptorProperty):
    attrs: Any = ...
    composite_class: Any = ...
    active_history: Any = ...
    deferred: Any = ...
    group: Any = ...
    comparator_factory: Any = ...
    info: Any = ...
    def __init__(self, class_: Any, *attrs: Any, **kwargs: Any) -> None: ...
    def instrument_class(self, mapper: Any) -> None: ...
    def do_init(self) -> None: ...
    def props(self): ...
    @property
    def columns(self): ...
    def get_history(self, state: Any, dict_: Any, passive: Any = ...): ...
    class CompositeBundle(query.Bundle):
        property: Any = ...
        def __init__(self, property_: Any, expr: Any) -> None: ...
        def create_row_processor(self, query: Any, procs: Any, labels: Any): ...
    class Comparator(PropComparator):
        __hash__: Any = ...
        @property
        def clauses(self): ...
        def __clause_element__(self): ...
        def __eq__(self, other: Any) -> Any: ...
        def __ne__(self, other: Any) -> Any: ...

class ConcreteInheritedProperty(DescriptorProperty):
    descriptor: Any = ...
    def __init__(self): ...

class SynonymProperty(DescriptorProperty):
    name: Any = ...
    map_column: Any = ...
    descriptor: Any = ...
    comparator_factory: Any = ...
    doc: Any = ...
    info: Any = ...
    def __init__(self, name: Any, map_column: Optional[Any] = ..., descriptor: Optional[Any] = ..., comparator_factory: Optional[Any] = ..., doc: Optional[Any] = ..., info: Optional[Any] = ...) -> None: ...
    @property
    def uses_objects(self): ...
    def get_history(self, *arg: Any, **kw: Any): ...
    parent: Any = ...
    def set_parent(self, parent: Any, init: Any) -> None: ...

class ComparableProperty(DescriptorProperty):
    descriptor: Any = ...
    comparator_factory: Any = ...
    doc: Any = ...
    info: Any = ...
    def __init__(self, comparator_factory: Any, descriptor: Optional[Any] = ..., doc: Optional[Any] = ..., info: Optional[Any] = ...) -> None: ...
