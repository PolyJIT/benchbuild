from .. import util
from ..sql import operators
from .base import EXT_CONTINUE as EXT_CONTINUE, EXT_SKIP as EXT_SKIP, EXT_STOP as EXT_STOP, InspectionAttr, MANYTOMANY as MANYTOMANY, MANYTOONE as MANYTOONE, NOT_EXTENSION as NOT_EXTENSION, ONETOMANY as ONETOMANY, _MappedAttribute
from typing import Any, Optional

MapperExtension: Any
SessionExtension: Any
AttributeExtension: Any

class MapperProperty(_MappedAttribute, InspectionAttr, util.MemoizedSlots):
    cascade: Any = ...
    is_property: bool = ...
    def setup(self, context: Any, query_entity: Any, path: Any, adapter: Any, **kwargs: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...
    def cascade_iterator(self, type_: Any, state: Any, visited_instances: Optional[Any] = ..., halt_on: Optional[Any] = ...): ...
    parent: Any = ...
    def set_parent(self, parent: Any, init: Any) -> None: ...
    def instrument_class(self, mapper: Any) -> None: ...
    def __init__(self) -> None: ...
    def init(self) -> None: ...
    @property
    def class_attribute(self): ...
    def do_init(self) -> None: ...
    def post_instrument_class(self, mapper: Any) -> None: ...
    def merge(self, session: Any, source_state: Any, source_dict: Any, dest_state: Any, dest_dict: Any, load: Any, _recursive: Any, _resolve_conflict_map: Any) -> None: ...

class PropComparator(operators.ColumnOperators):
    prop: Any = ...
    def __init__(self, prop: Any, parentmapper: Any, adapt_to_entity: Optional[Any] = ...) -> None: ...
    def __clause_element__(self) -> None: ...
    def adapt_to_entity(self, adapt_to_entity: Any): ...
    @property
    def adapter(self): ...
    @property
    def info(self): ...
    @staticmethod
    def any_op(a: Any, b: Any, **kwargs: Any): ...
    @staticmethod
    def has_op(a: Any, b: Any, **kwargs: Any): ...
    @staticmethod
    def of_type_op(a: Any, class_: Any): ...
    def of_type(self, class_: Any): ...
    def any(self, criterion: Optional[Any] = ..., **kwargs: Any): ...
    def has(self, criterion: Optional[Any] = ..., **kwargs: Any): ...

class StrategizedProperty(MapperProperty):
    strategy_wildcard_key: Any = ...
    def setup(self, context: Any, query_entity: Any, path: Any, adapter: Any, **kwargs: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...
    strategy: Any = ...
    def do_init(self) -> None: ...
    def post_instrument_class(self, mapper: Any) -> None: ...
    @classmethod
    def strategy_for(cls, **kw: Any): ...

class MapperOption:
    propagate_to_loaders: bool = ...
    def process_query(self, query: Any) -> None: ...
    def process_query_conditionally(self, query: Any) -> None: ...

class LoaderStrategy:
    parent_property: Any = ...
    is_class_level: bool = ...
    parent: Any = ...
    key: Any = ...
    strategy_key: Any = ...
    strategy_opts: Any = ...
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...
    def init_class_attribute(self, mapper: Any) -> None: ...
    def setup_query(self, context: Any, query_entity: Any, path: Any, loadopt: Any, adapter: Any, **kwargs: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...
