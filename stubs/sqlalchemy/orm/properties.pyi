from .. import util
from .interfaces import PropComparator, StrategizedProperty
from typing import Any

class ColumnProperty(StrategizedProperty):
    strategy_wildcard_key: str = ...
    columns: Any = ...
    group: Any = ...
    deferred: Any = ...
    instrument: Any = ...
    comparator_factory: Any = ...
    descriptor: Any = ...
    extension: Any = ...
    active_history: Any = ...
    expire_on_flush: Any = ...
    info: Any = ...
    doc: Any = ...
    strategy_key: Any = ...
    def __init__(self, *columns: Any, **kwargs: Any) -> None: ...
    def __clause_element__(self): ...
    @property
    def expression(self): ...
    def instrument_class(self, mapper: Any) -> None: ...
    def do_init(self) -> None: ...
    def copy(self): ...
    def merge(self, session: Any, source_state: Any, source_dict: Any, dest_state: Any, dest_dict: Any, load: Any, _recursive: Any, _resolve_conflict_map: Any) -> None: ...
    class Comparator(util.MemoizedSlots, PropComparator):
        def _memoized_method___clause_element__(self): ...
        def operate(self, op: Any, *other: Any, **kwargs: Any): ...
        def reverse_operate(self, op: Any, other: Any, **kwargs: Any): ...

# Names in __all__ with no definition:
#   ComparableProperty
#   CompositeProperty
#   ConcreteInheritedProperty
#   RelationshipProperty
#   SynonymProperty
