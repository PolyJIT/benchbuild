from .interfaces import PropComparator, StrategizedProperty
from typing import Any, Optional

def remote(expr: Any): ...
def foreign(expr: Any): ...

class RelationshipProperty(StrategizedProperty):
    strategy_wildcard_key: str = ...
    uselist: Any = ...
    argument: Any = ...
    secondary: Any = ...
    primaryjoin: Any = ...
    secondaryjoin: Any = ...
    post_update: Any = ...
    direction: Any = ...
    viewonly: Any = ...
    sync_backref: Any = ...
    lazy: Any = ...
    single_parent: Any = ...
    collection_class: Any = ...
    passive_deletes: Any = ...
    cascade_backrefs: Any = ...
    passive_updates: Any = ...
    remote_side: Any = ...
    enable_typechecks: Any = ...
    query_class: Any = ...
    innerjoin: Any = ...
    distinct_target_key: Any = ...
    doc: Any = ...
    active_history: Any = ...
    join_depth: Any = ...
    omit_join: Any = ...
    local_remote_pairs: Any = ...
    extension: Any = ...
    bake_queries: Any = ...
    load_on_pending: Any = ...
    comparator_factory: Any = ...
    comparator: Any = ...
    info: Any = ...
    strategy_key: Any = ...
    order_by: Any = ...
    back_populates: Any = ...
    backref: Any = ...
    def __init__(self, argument: Any, secondary: Optional[Any] = ..., primaryjoin: Optional[Any] = ..., secondaryjoin: Optional[Any] = ..., foreign_keys: Optional[Any] = ..., uselist: Optional[Any] = ..., order_by: bool = ..., backref: Optional[Any] = ..., back_populates: Optional[Any] = ..., post_update: bool = ..., cascade: bool = ..., extension: Optional[Any] = ..., viewonly: bool = ..., lazy: str = ..., collection_class: Optional[Any] = ..., passive_deletes: Any = ..., passive_updates: Any = ..., remote_side: Optional[Any] = ..., enable_typechecks: Any = ..., join_depth: Optional[Any] = ..., comparator_factory: Optional[Any] = ..., single_parent: bool = ..., innerjoin: bool = ..., distinct_target_key: Optional[Any] = ..., doc: Optional[Any] = ..., active_history: Any = ..., cascade_backrefs: Any = ..., load_on_pending: bool = ..., bake_queries: bool = ..., _local_remote_pairs: Optional[Any] = ..., query_class: Optional[Any] = ..., info: Optional[Any] = ..., omit_join: Optional[Any] = ..., sync_backref: Optional[Any] = ...) -> None: ...
    def instrument_class(self, mapper: Any) -> None: ...
    class Comparator(PropComparator):
        prop: Any = ...
        def __init__(self, prop: Any, parentmapper: Any, adapt_to_entity: Optional[Any] = ..., of_type: Optional[Any] = ...) -> None: ...
        def adapt_to_entity(self, adapt_to_entity: Any): ...
        def entity(self): ...
        def mapper(self): ...
        def __clause_element__(self): ...
        def of_type(self, cls: Any): ...
        def in_(self, other: Any) -> None: ...
        __hash__: Any = ...
        def __eq__(self, other: Any) -> Any: ...
        def any(self, criterion: Optional[Any] = ..., **kwargs: Any): ...
        def has(self, criterion: Optional[Any] = ..., **kwargs: Any): ...
        def contains(self, other: Any, **kwargs: Any): ...
        def __ne__(self, other: Any) -> Any: ...
        def property(self): ...
    def merge(self, session: Any, source_state: Any, source_dict: Any, dest_state: Any, dest_dict: Any, load: Any, _recursive: Any, _resolve_conflict_map: Any) -> None: ...
    def cascade_iterator(self, type_: Any, state: Any, dict_: Any, visited_states: Any, halt_on: Optional[Any] = ...) -> None: ...
    def entity(self) -> Union[AliasedInsp, Mapper]: ...
    def mapper(self): ...
    def do_init(self) -> None: ...
    @property
    def cascade(self): ...
    @cascade.setter
    def cascade(self, cascade: Any) -> None: ...

class JoinCondition:
    parent_persist_selectable: Any = ...
    parent_local_selectable: Any = ...
    child_persist_selectable: Any = ...
    child_local_selectable: Any = ...
    parent_equivalents: Any = ...
    child_equivalents: Any = ...
    primaryjoin: Any = ...
    secondaryjoin: Any = ...
    secondary: Any = ...
    consider_as_foreign_keys: Any = ...
    prop: Any = ...
    self_referential: Any = ...
    support_sync: Any = ...
    can_be_synced_fn: Any = ...
    def __init__(self, parent_persist_selectable: Any, child_persist_selectable: Any, parent_local_selectable: Any, child_local_selectable: Any, primaryjoin: Optional[Any] = ..., secondary: Optional[Any] = ..., secondaryjoin: Optional[Any] = ..., parent_equivalents: Optional[Any] = ..., child_equivalents: Optional[Any] = ..., consider_as_foreign_keys: Optional[Any] = ..., local_remote_pairs: Optional[Any] = ..., remote_side: Optional[Any] = ..., self_referential: bool = ..., prop: Optional[Any] = ..., support_sync: bool = ..., can_be_synced_fn: Any = ...): ...
    @property
    def primaryjoin_minus_local(self): ...
    @property
    def secondaryjoin_minus_local(self): ...
    def primaryjoin_reverse_remote(self): ...
    def remote_columns(self): ...
    def local_columns(self): ...
    def foreign_key_columns(self): ...
    def join_targets(self, source_selectable: Any, dest_selectable: Any, aliased: Any, single_crit: Optional[Any] = ...): ...
    def create_lazy_clause(self, reverse_direction: bool = ...): ...

class _ColInAnnotations:
    name: Any = ...
    def __init__(self, name: Any) -> None: ...
    def __call__(self, c: Any): ...
