from .deprecated_interfaces import SessionExtension as SessionExtension
from typing import Any, Optional

class _SessionClassMethods:
    @classmethod
    def close_all(cls) -> None: ...
    @classmethod
    def identity_key(cls, orm_util: Any, *args: Any, **kwargs: Any): ...
    @classmethod
    def object_session(cls, instance: Any): ...

class SessionTransaction:
    session: Any = ...
    nested: Any = ...
    def __init__(self, session: Any, parent: Optional[Any] = ..., nested: bool = ...) -> None: ...
    @property
    def parent(self): ...
    @property
    def is_active(self): ...
    def connection(self, bindkey: Any, execution_options: Optional[Any] = ..., **kwargs: Any): ...
    def prepare(self) -> None: ...
    def commit(self): ...
    def rollback(self, _capture_exception: bool = ...): ...
    def close(self, invalidate: bool = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type_: Any, value: Any, traceback: Any) -> None: ...

class Session(_SessionClassMethods):
    public_methods: Any = ...
    identity_map: Any = ...
    bind: Any = ...
    transaction: Any = ...
    hash_key: Any = ...
    autoflush: Any = ...
    autocommit: Any = ...
    expire_on_commit: Any = ...
    enable_baked_queries: Any = ...
    twophase: Any = ...
    def __init__(self, bind: Optional[Any] = ..., autoflush: bool = ..., expire_on_commit: bool = ..., _enable_transaction_accounting: bool = ..., autocommit: bool = ..., twophase: bool = ..., weak_identity_map: Optional[Any] = ..., binds: Optional[Any] = ..., extension: Optional[Any] = ..., enable_baked_queries: bool = ..., info: Optional[Any] = ..., query_cls: Optional[Any] = ...) -> None: ...
    connection_callable: Any = ...
    def info(self): ...
    def begin(self, subtransactions: bool = ..., nested: bool = ...): ...
    def begin_nested(self): ...
    def rollback(self) -> None: ...
    def commit(self) -> None: ...
    def prepare(self) -> None: ...
    def connection(self, mapper: Optional[Any] = ..., clause: Optional[Any] = ..., bind: Optional[Any] = ..., close_with_result: bool = ..., execution_options: Optional[Any] = ..., **kw: Any): ...
    def execute(self, clause: Any, params: Optional[Any] = ..., mapper: Optional[Any] = ..., bind: Optional[Any] = ..., **kw: Any): ...
    def scalar(self, clause: Any, params: Optional[Any] = ..., mapper: Optional[Any] = ..., bind: Optional[Any] = ..., **kw: Any): ...
    def close(self) -> None: ...
    def invalidate(self) -> None: ...
    def expunge_all(self) -> None: ...
    def bind_mapper(self, mapper: Any, bind: Any) -> None: ...
    def bind_table(self, table: Any, bind: Any) -> None: ...
    def get_bind(self, mapper: Optional[Any] = ..., clause: Optional[Any] = ...): ...
    def query(self, *entities: Any, **kwargs: Any): ...
    @property
    def no_autoflush(self) -> None: ...
    def refresh(self, instance: Any, attribute_names: Optional[Any] = ..., with_for_update: Optional[Any] = ..., lockmode: Optional[Any] = ...) -> None: ...
    def expire_all(self) -> None: ...
    def expire(self, instance: Any, attribute_names: Optional[Any] = ...) -> None: ...
    def prune(self): ...
    def expunge(self, instance: Any) -> None: ...
    def add(self, instance: Any, _warn: bool = ...) -> None: ...
    def add_all(self, instances: Any) -> None: ...
    def delete(self, instance: Any) -> None: ...
    def merge(self, instance: Any, load: bool = ...): ...
    def enable_relationship_loading(self, obj: Any) -> None: ...
    def __contains__(self, instance: Any): ...
    def __iter__(self) -> Any: ...
    def flush(self, objects: Optional[Any] = ...) -> None: ...
    def bulk_save_objects(self, objects: Any, return_defaults: bool = ..., update_changed_only: bool = ..., preserve_order: bool = ...): ...
    def bulk_insert_mappings(self, mapper: Any, mappings: Any, return_defaults: bool = ..., render_nulls: bool = ...) -> None: ...
    def bulk_update_mappings(self, mapper: Any, mappings: Any) -> None: ...
    def is_modified(self, instance: Any, include_collections: bool = ..., passive: Optional[Any] = ...): ...
    @property
    def is_active(self): ...
    @property
    def dirty(self): ...
    @property
    def deleted(self): ...
    @property
    def new(self): ...

class sessionmaker(_SessionClassMethods):
    kw: Any = ...
    class_: Any = ...
    def __init__(self, bind: Optional[Any] = ..., class_: Any = ..., autoflush: bool = ..., autocommit: bool = ..., expire_on_commit: bool = ..., info: Optional[Any] = ..., **kw: Any) -> None: ...
    def __call__(self, **local_kw: Any): ...
    def configure(self, **new_kw: Any) -> None: ...
