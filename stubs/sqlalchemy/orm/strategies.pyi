from .. import util
from .interfaces import LoaderStrategy
from collections import namedtuple
from typing import Any, Optional

class UninstrumentedColumnLoader(LoaderStrategy):
    columns: Any = ...
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...
    def setup_query(self, context: Any, query_entity: Any, path: Any, loadopt: Any, adapter: Any, column_collection: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...

class ColumnLoader(LoaderStrategy):
    columns: Any = ...
    is_composite: Any = ...
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...
    def setup_query(self, context: Any, query_entity: Any, path: Any, loadopt: Any, adapter: Any, column_collection: Any, memoized_populators: Any, **kwargs: Any) -> None: ...
    is_class_level: bool = ...
    def init_class_attribute(self, mapper: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...

class ExpressionColumnLoader(ColumnLoader):
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...
    def setup_query(self, context: Any, query_entity: Any, path: Any, loadopt: Any, adapter: Any, column_collection: Any, memoized_populators: Any, **kwargs: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...
    is_class_level: bool = ...
    def init_class_attribute(self, mapper: Any) -> None: ...

class DeferredColumnLoader(LoaderStrategy):
    columns: Any = ...
    group: Any = ...
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...
    is_class_level: bool = ...
    def init_class_attribute(self, mapper: Any) -> None: ...
    def setup_query(self, context: Any, query_entity: Any, path: Any, loadopt: Any, adapter: Any, column_collection: Any, memoized_populators: Any, only_load_props: Optional[Any] = ..., **kw: Any) -> None: ...

class LoadDeferredColumns:
    key: Any = ...
    def __init__(self, key: Any) -> None: ...
    def __call__(self, state: Any, passive: Any = ...): ...

class AbstractRelationshipLoader(LoaderStrategy):
    mapper: Any = ...
    entity: Any = ...
    target: Any = ...
    uselist: Any = ...
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...

class DoNothingLoader(LoaderStrategy): ...

class NoLoader(AbstractRelationshipLoader):
    is_class_level: bool = ...
    def init_class_attribute(self, mapper: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...

class LazyLoader(AbstractRelationshipLoader, util.MemoizedSlots):
    is_aliased_class: Any = ...
    use_get: Any = ...
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...
    is_class_level: bool = ...
    def init_class_attribute(self, mapper: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...

class LoadLazyAttribute:
    key: Any = ...
    strategy_key: Any = ...
    def __init__(self, key: Any, initiating_strategy: Any) -> None: ...
    def __call__(self, state: Any, passive: Any = ...): ...

class ImmediateLoader(AbstractRelationshipLoader):
    def init_class_attribute(self, mapper: Any) -> None: ...
    def setup_query(self, context: Any, entity: Any, path: Any, loadopt: Any, adapter: Any, column_collection: Optional[Any] = ..., parentmapper: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...

class SubqueryLoader(AbstractRelationshipLoader):
    join_depth: Any = ...
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...
    def init_class_attribute(self, mapper: Any) -> None: ...
    def setup_query(self, context: Any, entity: Any, path: Any, loadopt: Any, adapter: Any, column_collection: Optional[Any] = ..., parentmapper: Optional[Any] = ..., **kwargs: Any) -> None: ...
    class _SubqCollections:
        subq: Any = ...
        def __init__(self, subq: Any) -> None: ...
        def get(self, key: Any, default: Any): ...
        def loader(self, state: Any, dict_: Any, row: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...

class JoinedLoader(AbstractRelationshipLoader):
    join_depth: Any = ...
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...
    def init_class_attribute(self, mapper: Any) -> None: ...
    def setup_query(self, context: Any, query_entity: Any, path: Any, loadopt: Any, adapter: Any, column_collection: Optional[Any] = ..., parentmapper: Optional[Any] = ..., chained_from_outerjoin: bool = ..., **kwargs: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...

class SelectInLoader(AbstractRelationshipLoader, util.MemoizedSlots):

    query_info = namedtuple('queryinfo', ['load_only_child', 'load_with_join', 'in_expr', 'pk_cols', 'zero_idx', 'child_lookup_cols'])
    join_depth: Any = ...
    omit_join: Any = ...
    def __init__(self, parent: Any, strategy_key: Any) -> None: ...
    def init_class_attribute(self, mapper: Any) -> None: ...
    def create_row_processor(self, context: Any, path: Any, loadopt: Any, mapper: Any, result: Any, adapter: Any, populators: Any) -> None: ...

def single_parent_validator(desc: Any, prop: Any): ...
