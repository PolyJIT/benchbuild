from ..sql.base import Generative
from .interfaces import MapperOption
from typing import Any, Optional

class Load(Generative, MapperOption):
    path: Any = ...
    context: Any = ...
    local_opts: Any = ...
    is_class_strategy: bool = ...
    def __init__(self, entity: Any) -> None: ...
    @classmethod
    def for_existing_path(cls, path: Any): ...
    is_opts_only: bool = ...
    strategy: Any = ...
    propagate_to_loaders: bool = ...
    def process_query(self, query: Any) -> None: ...
    def process_query_conditionally(self, query: Any) -> None: ...
    def options(self, *opts: Any) -> None: ...
    def set_relationship_strategy(self, attr: Any, strategy: Any, propagate_to_loaders: bool = ...) -> None: ...
    def set_column_strategy(self, attrs: Any, strategy: Any, opts: Optional[Any] = ..., opts_only: bool = ...) -> None: ...
    def set_generic_strategy(self, attrs: Any, strategy: Any) -> None: ...
    def set_class_strategy(self, strategy: Any, opts: Any) -> None: ...

class _UnboundLoad(Load):
    path: Any = ...
    local_opts: Any = ...
    def __init__(self) -> None: ...

class loader_option:
    def __init__(self) -> None: ...
    name: Any = ...
    fn: Any = ...
    def __call__(self, fn: Any): ...

def contains_eager(*keys: Any, **kw: Any): ...
def load_only(*attrs: Any): ...
def joinedload(*keys: Any, **kw: Any): ...
def joinedload_all(*keys: Any, **kw: Any): ...
def subqueryload(*keys: Any): ...
def subqueryload_all(*keys: Any): ...
def selectinload(*keys: Any): ...
def selectinload_all(*keys: Any): ...
def lazyload(*keys: Any): ...
def lazyload_all(*keys: Any): ...
def immediateload(*keys: Any): ...
def noload(*keys: Any): ...
def raiseload(*keys: Any, **kw: Any): ...
def defaultload(*keys: Any): ...
def defer(key: Any, *addl_attrs: Any): ...
def undefer(key: Any, *addl_attrs: Any): ...
def undefer_group(name: Any): ...
def with_expression(key: Any, expression: Any): ...
def selectin_polymorphic(base_cls: Any, classes: Any): ...
