from .. import util
from .visitors import ClauseVisitor
from typing import Any

PARSE_AUTOCOMMIT: Any
NO_ARG: Any

class Immutable:
    def unique_params(self, *optionaldict: Any, **kwargs: Any) -> None: ...
    def params(self, *optionaldict: Any, **kwargs: Any) -> None: ...

class _DialectArgView(util.collections_abc.MutableMapping):
    obj: Any = ...
    def __init__(self, obj: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...

class _DialectArgDict(util.collections_abc.MutableMapping):
    def __init__(self) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...

class DialectKWArgs:
    @classmethod
    def argument_for(cls, dialect_name: Any, argument_name: Any, default: Any) -> None: ...
    def dialect_kwargs(self): ...
    @property
    def kwargs(self): ...
    def dialect_options(self): ...

class Generative: ...

class Executable(Generative):
    supports_execution: bool = ...
    def execution_options(self, **kw: Any) -> None: ...
    def get_execution_options(self): ...
    def execute(self, *multiparams: Any, **params: Any): ...
    def scalar(self, *multiparams: Any, **params: Any): ...
    @property
    def bind(self): ...

class SchemaEventTarget: ...

class SchemaVisitor(ClauseVisitor):
    __traverse_options__: Any = ...

class ColumnCollection(util.OrderedProperties):
    def __init__(self, *columns: Any) -> None: ...
    def replace(self, column: Any) -> None: ...
    def add(self, column: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __setattr__(self, key: Any, obj: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def clear(self) -> None: ...
    def remove(self, column: Any) -> None: ...
    def update(self, iter_: Any) -> None: ...
    def extend(self, iter_: Any) -> None: ...
    __hash__: Any = ...
    def __eq__(self, elements: Any, other: Any) -> Any: ...
    def __contains__(self, other: Any): ...
    def contains_column(self, col: Any): ...
    def as_immutable(self): ...

class ImmutableColumnCollection(util.ImmutableProperties, ColumnCollection):
    def __init__(self, data: Any, all_columns: Any) -> None: ...
    extend: Any = ...
    remove: Any = ...

class ColumnSet(util.ordered_column_set):
    def contains_column(self, col: Any): ...
    def extend(self, cols: Any) -> None: ...
    def __add__(self, other: Any): ...
    def __eq__(self, elements: Any, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
