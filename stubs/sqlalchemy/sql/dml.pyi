from .base import DialectKWArgs, Executable
from .elements import ClauseElement
from .selectable import HasCTE, HasPrefixes
from typing import Any, Optional

class UpdateBase(HasCTE, DialectKWArgs, HasPrefixes, Executable, ClauseElement):
    __visit_name__: str = ...
    named_with_column: bool = ...
    def params(self, *arg: Any, **kw: Any) -> None: ...
    def bind(self): ...
    bind: Any = ...
    def returning(self, *cols: Any) -> None: ...
    def with_hint(self, text: Any, selectable: Optional[Any] = ..., dialect_name: str = ...) -> None: ...

class ValuesBase(UpdateBase):
    __visit_name__: str = ...
    select: Any = ...
    table: Any = ...
    def __init__(self, table: Any, values: Any, prefixes: Any) -> None: ...
    parameters: Any = ...
    def values(self, *args: Any, **kwargs: Any) -> None: ...
    def return_defaults(self, *cols: Any) -> None: ...

class Insert(ValuesBase):
    __visit_name__: str = ...
    select: Any = ...
    include_insert_from_select_defaults: bool = ...
    inline: Any = ...
    def __init__(self, table: Any, values: Optional[Any] = ..., inline: bool = ..., bind: Optional[Any] = ..., prefixes: Optional[Any] = ..., returning: Optional[Any] = ..., return_defaults: bool = ..., **dialect_kw: Any) -> None: ...
    def get_children(self, **kwargs: Any): ...
    select_names: Any = ...
    def from_select(self, names: Any, select: Any, include_defaults: bool = ...) -> None: ...

class Update(ValuesBase):
    __visit_name__: str = ...
    inline: Any = ...
    def __init__(self, table: Any, whereclause: Optional[Any] = ..., values: Optional[Any] = ..., inline: bool = ..., bind: Optional[Any] = ..., prefixes: Optional[Any] = ..., returning: Optional[Any] = ..., return_defaults: bool = ..., preserve_parameter_order: bool = ..., **dialect_kw: Any) -> None: ...
    def get_children(self, **kwargs: Any): ...
    def where(self, whereclause: Any) -> None: ...

class Delete(UpdateBase):
    __visit_name__: str = ...
    table: Any = ...
    def __init__(self, table: Any, whereclause: Optional[Any] = ..., bind: Optional[Any] = ..., returning: Optional[Any] = ..., prefixes: Optional[Any] = ..., **dialect_kw: Any) -> None: ...
    def get_children(self, **kwargs: Any): ...
    def where(self, whereclause: Any) -> None: ...
