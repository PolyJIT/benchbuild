from .base import Executable
from .elements import BinaryExpression, ColumnElement
from .selectable import FromClause
from .visitors import VisitableType
from typing import Any, Optional

def register_function(identifier: Any, fn: Any, package: str = ...) -> None: ...

class FunctionElement(Executable, ColumnElement, FromClause):
    packagenames: Any = ...
    clause_expr: Any = ...
    def __init__(self, *clauses: Any, **kwargs: Any) -> None: ...
    @property
    def columns(self): ...
    def clauses(self): ...
    def over(self, partition_by: Optional[Any] = ..., order_by: Optional[Any] = ..., rows: Optional[Any] = ..., range_: Optional[Any] = ...): ...
    def within_group(self, *order_by: Any): ...
    def filter(self, *criterion: Any): ...
    def as_comparison(self, left_index: Any, right_index: Any): ...
    def get_children(self, **kwargs: Any): ...
    def within_group_type(self, within_group: Any) -> None: ...
    def alias(self, name: Optional[Any] = ..., flat: bool = ...): ...
    def select(self): ...
    def scalar(self): ...
    def execute(self): ...
    def self_group(self, against: Optional[Any] = ...): ...

class FunctionAsBinary(BinaryExpression):
    sql_function: Any = ...
    left_index: Any = ...
    right_index: Any = ...
    def __init__(self, fn: Any, left_index: Any, right_index: Any) -> None: ...
    @property
    def left(self): ...
    @left.setter
    def left(self, value: Any) -> None: ...
    @property
    def right(self): ...
    @right.setter
    def right(self, value: Any) -> None: ...

class _FunctionGenerator:
    opts: Any = ...
    def __init__(self, **opts: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def __call__(self, *c: Any, **kwargs: Any): ...

func: Any
modifier: Any

class Function(FunctionElement):
    __visit_name__: str = ...
    packagenames: Any = ...
    name: Any = ...
    type: Any = ...
    def __init__(self, name: Any, *clauses: Any, **kw: Any) -> None: ...

class _GenericMeta(VisitableType):
    def __init__(cls, clsname: Any, bases: Any, clsdict: Any) -> None: ...

class GenericFunction:
    coerce_arguments: bool = ...
    packagenames: Any = ...
    clause_expr: Any = ...
    type: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class next_value(GenericFunction):
    type: Any = ...
    name: str = ...
    sequence: Any = ...
    def __init__(self, seq: Any, **kw: Any) -> None: ...

class AnsiFunction(GenericFunction):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class ReturnTypeFromArgs(GenericFunction):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class coalesce(ReturnTypeFromArgs): ...
class max(ReturnTypeFromArgs): ...
class min(ReturnTypeFromArgs): ...
class sum(ReturnTypeFromArgs): ...

class now(GenericFunction):
    type: Any = ...

class concat(GenericFunction):
    type: Any = ...

class char_length(GenericFunction):
    type: Any = ...
    def __init__(self, arg: Any, **kwargs: Any) -> None: ...

class random(GenericFunction): ...

class count(GenericFunction):
    type: Any = ...
    def __init__(self, expression: Optional[Any] = ..., **kwargs: Any) -> None: ...

class current_date(AnsiFunction):
    type: Any = ...

class current_time(AnsiFunction):
    type: Any = ...

class current_timestamp(AnsiFunction):
    type: Any = ...

class current_user(AnsiFunction):
    type: Any = ...

class localtime(AnsiFunction):
    type: Any = ...

class localtimestamp(AnsiFunction):
    type: Any = ...

class session_user(AnsiFunction):
    type: Any = ...

class sysdate(AnsiFunction):
    type: Any = ...

class user(AnsiFunction):
    type: Any = ...

class array_agg(GenericFunction):
    type: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class OrderedSetAgg(GenericFunction):
    array_for_multi_clause: bool = ...
    def within_group_type(self, within_group: Any): ...

class mode(OrderedSetAgg): ...

class percentile_cont(OrderedSetAgg):
    array_for_multi_clause: bool = ...

class percentile_disc(OrderedSetAgg):
    array_for_multi_clause: bool = ...

class rank(GenericFunction):
    type: Any = ...

class dense_rank(GenericFunction):
    type: Any = ...

class percent_rank(GenericFunction):
    type: Any = ...

class cume_dist(GenericFunction):
    type: Any = ...

class cube(GenericFunction): ...
class rollup(GenericFunction): ...
class grouping_sets(GenericFunction): ...
