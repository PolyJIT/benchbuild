from operator import truediv
from typing import Any, Optional

div = truediv

class Operators:
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __invert__(self): ...
    def op(self, opstring: Any, precedence: int = ..., is_comparison: bool = ..., return_type: Optional[Any] = ...): ...
    def bool_op(self, opstring: Any, precedence: int = ...): ...
    def operate(self, op: Any, *other: Any, **kwargs: Any) -> None: ...
    def reverse_operate(self, op: Any, other: Any, **kwargs: Any) -> None: ...

class custom_op:
    __name__: str = ...
    opstring: Any = ...
    precedence: Any = ...
    is_comparison: Any = ...
    natural_self_precedent: Any = ...
    eager_grouping: Any = ...
    return_type: Any = ...
    def __init__(self, opstring: Any, precedence: int = ..., is_comparison: bool = ..., return_type: Optional[Any] = ..., natural_self_precedent: bool = ..., eager_grouping: bool = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __call__(self, left: Any, right: Any, **kw: Any): ...

class ColumnOperators(Operators):
    timetuple: Any = ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    __hash__: Any = ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def is_distinct_from(self, other: Any): ...
    def isnot_distinct_from(self, other: Any): ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __neg__(self): ...
    def __contains__(self, other: Any): ...
    def __getitem__(self, index: Any): ...
    def __lshift__(self, other: Any): ...
    def __rshift__(self, other: Any): ...
    def concat(self, other: Any): ...
    def like(self, other: Any, escape: Optional[Any] = ...): ...
    def ilike(self, other: Any, escape: Optional[Any] = ...): ...
    def in_(self, other: Any): ...
    def notin_(self, other: Any): ...
    def notlike(self, other: Any, escape: Optional[Any] = ...): ...
    def notilike(self, other: Any, escape: Optional[Any] = ...): ...
    def is_(self, other: Any): ...
    def isnot(self, other: Any): ...
    def startswith(self, other: Any, **kwargs: Any): ...
    def endswith(self, other: Any, **kwargs: Any): ...
    def contains(self, other: Any, **kwargs: Any): ...
    def match(self, other: Any, **kwargs: Any): ...
    def desc(self): ...
    def asc(self): ...
    def nullsfirst(self): ...
    def nullslast(self): ...
    def collate(self, collation: Any): ...
    def __radd__(self, other: Any): ...
    def __rsub__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __rdiv__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def between(self, cleft: Any, cright: Any, symmetric: bool = ...): ...
    def distinct(self): ...
    def any_(self): ...
    def all_(self): ...
    def __add__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __div__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    def __rtruediv__(self, other: Any): ...

def commutative_op(fn: Any): ...
def comparison_op(fn: Any): ...
def from_() -> None: ...
def function_as_comparison_op() -> None: ...
def as_() -> None: ...
def exists() -> None: ...
def istrue(a: Any) -> None: ...
def isfalse(a: Any) -> None: ...
def is_distinct_from(a: Any, b: Any): ...
def isnot_distinct_from(a: Any, b: Any): ...
def is_(a: Any, b: Any): ...
def isnot(a: Any, b: Any): ...
def collate(a: Any, b: Any): ...
def op(a: Any, opstring: Any, b: Any): ...
def like_op(a: Any, b: Any, escape: Optional[Any] = ...): ...
def notlike_op(a: Any, b: Any, escape: Optional[Any] = ...): ...
def ilike_op(a: Any, b: Any, escape: Optional[Any] = ...): ...
def notilike_op(a: Any, b: Any, escape: Optional[Any] = ...): ...
def between_op(a: Any, b: Any, c: Any, symmetric: bool = ...): ...
def notbetween_op(a: Any, b: Any, c: Any, symmetric: bool = ...): ...
def in_op(a: Any, b: Any): ...
def notin_op(a: Any, b: Any): ...
def distinct_op(a: Any): ...
def any_op(a: Any): ...
def all_op(a: Any): ...
def startswith_op(a: Any, b: Any, escape: Optional[Any] = ..., autoescape: bool = ...): ...
def notstartswith_op(a: Any, b: Any, escape: Optional[Any] = ..., autoescape: bool = ...): ...
def endswith_op(a: Any, b: Any, escape: Optional[Any] = ..., autoescape: bool = ...): ...
def notendswith_op(a: Any, b: Any, escape: Optional[Any] = ..., autoescape: bool = ...): ...
def contains_op(a: Any, b: Any, escape: Optional[Any] = ..., autoescape: bool = ...): ...
def notcontains_op(a: Any, b: Any, escape: Optional[Any] = ..., autoescape: bool = ...): ...
def match_op(a: Any, b: Any, **kw: Any): ...
def notmatch_op(a: Any, b: Any, **kw: Any): ...
def comma_op(a: Any, b: Any) -> None: ...
def empty_in_op(a: Any, b: Any) -> None: ...
def empty_notin_op(a: Any, b: Any) -> None: ...
def filter_op(a: Any, b: Any) -> None: ...
def concat_op(a: Any, b: Any): ...
def desc_op(a: Any): ...
def asc_op(a: Any): ...
def nullsfirst_op(a: Any): ...
def nullslast_op(a: Any): ...
def json_getitem_op(a: Any, b: Any) -> None: ...
def json_path_getitem_op(a: Any, b: Any) -> None: ...
def is_comparison(op: Any): ...
def is_commutative(op: Any): ...
def is_ordering_modifier(op: Any): ...
def is_natural_self_precedent(op: Any): ...
def is_boolean(op: Any): ...
def mirror(op: Any): ...
def is_precedent(operator: Any, against: Any): ...
