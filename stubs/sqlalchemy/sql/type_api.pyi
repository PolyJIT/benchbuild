from . import operators
from .. import util
from .base import SchemaEventTarget
from .visitors import Visitable, VisitableType
from typing import Any, Optional

BOOLEANTYPE: Any
INTEGERTYPE: Any
NULLTYPE: Any
STRINGTYPE: Any
MATCHTYPE: Any
INDEXABLE: Any

class TypeEngine(Visitable):
    class Comparator(operators.ColumnOperators):
        default_comparator: Any = ...
        expr: Any = ...
        type: Any = ...
        def __init__(self, expr: Any) -> None: ...
        def operate(self, default_comparator: Any, op: Any, *other: Any, **kwargs: Any): ...
        def reverse_operate(self, default_comparator: Any, op: Any, other: Any, **kwargs: Any): ...
        def __reduce__(self): ...
    hashable: bool = ...
    comparator_factory: Any = ...
    sort_key_function: Any = ...
    should_evaluate_none: bool = ...
    def evaluates_none(self): ...
    def copy(self, **kw: Any): ...
    def compare_against_backend(self, dialect: Any, conn_type: Any) -> None: ...
    def copy_value(self, value: Any): ...
    def literal_processor(self, dialect: Any) -> None: ...
    def bind_processor(self, dialect: Any) -> None: ...
    def result_processor(self, dialect: Any, coltype: Any) -> None: ...
    def column_expression(self, colexpr: Any) -> None: ...
    def bind_expression(self, bindvalue: Any) -> None: ...
    def compare_values(self, x: Any, y: Any): ...
    def get_dbapi_type(self, dbapi: Any) -> None: ...
    @property
    def python_type(self) -> None: ...
    def with_variant(self, type_: Any, dialect_name: Any): ...
    def dialect_impl(self, dialect: Any): ...
    def adapt(self, cls: Any, **kw: Any): ...
    def coerce_compared_value(self, op: Any, value: Any): ...
    def compile(self, dialect: Optional[Any] = ...): ...

class VisitableCheckKWArg(util.EnsureKWArgType, VisitableType): ...

class UserDefinedType:
    __visit_name__: str = ...
    ensure_kwarg: str = ...
    class Comparator(TypeEngine.Comparator): ...
    comparator_factory: Any = ...
    def coerce_compared_value(self, op: Any, value: Any): ...

class Emulated:
    def adapt_to_emulated(self, impltype: Any, **kw: Any): ...
    def adapt(self, impltype: Any, **kw: Any): ...

class NativeForEmulated:
    @classmethod
    def adapt_emulated_to_native(cls, impl: Any, **kw: Any): ...

class TypeDecorator(SchemaEventTarget, TypeEngine):
    __visit_name__: str = ...
    impl: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    coerce_to_is_types: Any = ...
    class Comparator(TypeEngine.Comparator):
        def operate(self, op: Any, *other: Any, **kwargs: Any): ...
        def reverse_operate(self, op: Any, other: Any, **kwargs: Any): ...
    @property
    def comparator_factory(self): ...
    def type_engine(self, dialect: Any): ...
    def load_dialect_impl(self, dialect: Any): ...
    def __getattr__(self, key: Any): ...
    def process_literal_param(self, value: Any, dialect: Any) -> None: ...
    def process_bind_param(self, value: Any, dialect: Any) -> None: ...
    def process_result_value(self, value: Any, dialect: Any) -> None: ...
    def literal_processor(self, dialect: Any): ...
    def bind_processor(self, dialect: Any): ...
    def result_processor(self, dialect: Any, coltype: Any): ...
    def bind_expression(self, bindparam: Any): ...
    def column_expression(self, column: Any): ...
    def coerce_compared_value(self, op: Any, value: Any): ...
    def copy(self, **kw: Any): ...
    def get_dbapi_type(self, dbapi: Any): ...
    def compare_values(self, x: Any, y: Any): ...
    @property
    def sort_key_function(self): ...

class Variant(TypeDecorator):
    impl: Any = ...
    mapping: Any = ...
    def __init__(self, base: Any, mapping: Any) -> None: ...
    def coerce_compared_value(self, operator: Any, value: Any): ...
    def load_dialect_impl(self, dialect: Any): ...
    def with_variant(self, type_: Any, dialect_name: Any): ...
    @property
    def comparator_factory(self): ...

def to_instance(typeobj: Any, *arg: Any, **kw: Any): ...
def adapt_type(typeobj: Any, colspecs: Any): ...
