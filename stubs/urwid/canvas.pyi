from typing import Any, Optional

class CanvasCache:
    hits: int = ...
    fetches: int = ...
    cleanups: int = ...
    def store(cls, wcls: Any, canvas: Any): ...
    store: Any = ...
    def fetch(cls, widget: Any, wcls: Any, size: Any, focus: Any): ...
    fetch: Any = ...
    def invalidate(cls, widget: Any) -> None: ...
    invalidate: Any = ...
    def cleanup(cls, ref: Any) -> None: ...
    cleanup: Any = ...
    def clear(cls) -> None: ...
    clear: Any = ...

class CanvasError(Exception): ...

class Canvas:
    cacheable: bool = ...
    coords: Any = ...
    shortcuts: Any = ...
    def __init__(self, value1: Optional[Any] = ..., value2: Optional[Any] = ..., value3: Optional[Any] = ...) -> None: ...
    def finalize(self, widget: Any, size: Any, focus: Any) -> None: ...
    widget_info: Any = ...
    text: Any = ...
    attr: Any = ...
    cs: Any = ...
    def content(self, trim_left: int = ..., trim_top: int = ..., cols: Optional[Any] = ..., rows: Optional[Any] = ..., attr: Optional[Any] = ...) -> None: ...
    def cols(self) -> None: ...
    def rows(self) -> None: ...
    def content_delta(self) -> None: ...
    def get_cursor(self): ...
    def set_cursor(self, c: Any) -> None: ...
    cursor: Any = ...
    def get_pop_up(self): ...
    def set_pop_up(self, w: Any, left: Any, top: Any, overlay_width: Any, overlay_height: Any) -> None: ...
    def translate_coords(self, dx: Any, dy: Any): ...

class TextCanvas(Canvas):
    cursor: Any = ...
    def __init__(self, text: Optional[Any] = ..., attr: Optional[Any] = ..., cs: Optional[Any] = ..., cursor: Optional[Any] = ..., maxcol: Optional[Any] = ..., check_width: bool = ...) -> None: ...
    def rows(self): ...
    def cols(self): ...
    def translated_coords(self, dx: Any, dy: Any): ...
    def content(self, trim_left: int = ..., trim_top: int = ..., cols: Optional[Any] = ..., rows: Optional[Any] = ..., attr_map: Optional[Any] = ...) -> None: ...
    def content_delta(self, other: Any): ...

class BlankCanvas(Canvas):
    def __init__(self) -> None: ...
    def content(self, trim_left: Any, trim_top: Any, cols: Any, rows: Any, attr: Any) -> None: ...
    def cols(self) -> None: ...
    def rows(self) -> None: ...
    def content_delta(self) -> None: ...

blank_canvas: Any

class SolidCanvas(Canvas):
    size: Any = ...
    cursor: Any = ...
    def __init__(self, fill_char: Any, cols: Any, rows: Any) -> None: ...
    def cols(self): ...
    def rows(self): ...
    def content(self, trim_left: int = ..., trim_top: int = ..., cols: Optional[Any] = ..., rows: Optional[Any] = ..., attr: Optional[Any] = ...) -> None: ...
    def content_delta(self, other: Any): ...

class CompositeCanvas(Canvas):
    shards: Any = ...
    children: Any = ...
    def __init__(self, canv: Optional[Any] = ...) -> None: ...
    def rows(self): ...
    def cols(self): ...
    def content(self) -> None: ...
    def content_delta(self, other: Any) -> None: ...
    coords: Any = ...
    def trim(self, top: Any, count: Optional[Any] = ...) -> None: ...
    def trim_end(self, end: Any) -> None: ...
    def pad_trim_left_right(self, left: Any, right: Any) -> None: ...
    def pad_trim_top_bottom(self, top: Any, bottom: Any) -> None: ...
    def overlay(self, other: Any, left: Any, top: Any) -> None: ...
    def fill_attr(self, a: Any) -> None: ...
    def fill_attr_apply(self, mapping: Any) -> None: ...
    depends_on: Any = ...
    def set_depends(self, widget_list: Any) -> None: ...

def shard_body_row(sbody: Any): ...
def shard_body_tail(num_rows: Any, sbody: Any): ...
def shards_delta(shards: Any, other_shards: Any) -> None: ...
def shard_cviews_delta(cviews: Any, other_cviews: Any) -> None: ...
def shard_body(cviews: Any, shard_tail: Any, create_iter: bool = ..., iter_default: Optional[Any] = ...): ...
def shards_trim_top(shards: Any, top: Any): ...
def shards_trim_rows(shards: Any, keep_rows: Any): ...
def shards_trim_sides(shards: Any, left: Any, cols: Any): ...
def shards_join(shard_lists: Any): ...
def cview_trim_rows(cv: Any, rows: Any): ...
def cview_trim_top(cv: Any, trim: Any): ...
def cview_trim_left(cv: Any, trim: Any): ...
def cview_trim_cols(cv: Any, cols: Any): ...
def CanvasCombine(l: Any): ...
def CanvasOverlay(top_c: Any, bottom_c: Any, left: Any, top: Any): ...
def CanvasJoin(l: Any): ...
def apply_text_layout(text: Any, attr: Any, ls: Any, maxcol: Any): ...
