from typing import Any, Optional

UNPRINTABLE_TRANS_TABLE: Any
UPDATE_PALETTE_ENTRY: str
INPUT_DESCRIPTORS_CHANGED: str
DEFAULT: str
BLACK: str
DARK_RED: str
DARK_GREEN: str
BROWN: str
DARK_BLUE: str
DARK_MAGENTA: str
DARK_CYAN: str
LIGHT_GRAY: str
DARK_GRAY: str
LIGHT_RED: str
LIGHT_GREEN: str
YELLOW: str
LIGHT_BLUE: str
LIGHT_MAGENTA: str
LIGHT_CYAN: str
WHITE: str

class AttrSpecError(Exception): ...

class AttrSpec:
    foreground: Any = ...
    background: Any = ...
    def __init__(self, fg: Any, bg: Any, colors: int = ...) -> None: ...
    foreground_basic: Any = ...
    foreground_high: Any = ...
    foreground_true: Any = ...
    foreground_number: Any = ...
    background_basic: Any = ...
    background_high: Any = ...
    background_true: Any = ...
    background_number: Any = ...
    italics: Any = ...
    bold: Any = ...
    underline: Any = ...
    blink: Any = ...
    standout: Any = ...
    strikethrough: Any = ...
    colors: Any = ...
    def get_rgb_values(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    __hash__: Any = ...

class RealTerminal:
    def __init__(self) -> None: ...
    def tty_signal_keys(self, intr: Optional[Any] = ..., quit: Optional[Any] = ..., start: Optional[Any] = ..., stop: Optional[Any] = ..., susp: Optional[Any] = ..., fileno: Optional[Any] = ...): ...

class ScreenError(Exception): ...

class BaseScreen:
    signals: Any = ...
    def __init__(self) -> None: ...
    started: Any = ...
    def start(self, *args: Any, **kwargs: Any): ...
    def stop(self) -> None: ...
    def run_wrapper(self, fn: Any, *args: Any, **kwargs: Any): ...
    def register_palette(self, palette: Any) -> None: ...
    def register_palette_entry(self, name: Any, foreground: Any, background: Any, mono: Optional[Any] = ..., foreground_high: Optional[Any] = ..., background_high: Optional[Any] = ...): ...
