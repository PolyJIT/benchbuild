from typing import Any, Optional
from urwid.decoration import WidgetDecoration
from urwid.widget import Widget, WidgetMeta, WidgetWrap

class BigText(Widget):
    def __init__(self, markup: Any, font: Any) -> None: ...
    def set_text(self, markup: Any) -> None: ...
    def get_text(self): ...
    font: Any = ...
    def set_font(self, font: Any) -> None: ...
    def pack(self, size: Optional[Any] = ..., focus: bool = ...): ...
    def render(self, size: Any, focus: bool = ...): ...

class LineBox(WidgetDecoration, WidgetWrap):
    title_widget: Any = ...
    tline_widget: Any = ...
    def __init__(self, original_widget: Any, title: str = ..., title_align: str = ..., title_attr: Optional[Any] = ..., tlcorner: str = ..., tline: str = ..., lline: str = ..., trcorner: str = ..., blcorner: str = ..., rline: str = ..., bline: str = ..., brcorner: str = ...) -> None: ...
    def format_title(self, text: Any): ...
    def set_title(self, text: Any) -> None: ...

class BarGraphMeta(WidgetMeta):
    def __init__(cls, name: Any, bases: Any, d: Any): ...

def nocache_bargraph_get_data(self, get_data_fn: Any) -> None: ...

class BarGraphError(Exception): ...

class BarGraph:
    ignore_focus: bool = ...
    eighths: str = ...
    hlines: str = ...
    def __init__(self, attlist: Any, hatt: Optional[Any] = ..., satt: Optional[Any] = ...) -> None: ...
    attr: Any = ...
    char: Any = ...
    hatt: Any = ...
    satt: Any = ...
    def set_segment_attributes(self, attlist: Any, hatt: Optional[Any] = ..., satt: Optional[Any] = ...) -> None: ...
    data: Any = ...
    def set_data(self, bardata: Any, top: Any, hlines: Optional[Any] = ...) -> None: ...
    bar_width: Any = ...
    def set_bar_width(self, width: Any) -> None: ...
    def calculate_bar_widths(self, size: Any, bardata: Any): ...
    def selectable(self): ...
    def use_smoothed(self): ...
    def calculate_display(self, size: Any): ...
    def hlines_display(self, disp: Any, top: Any, hlines: Any, maxrow: Any): ...
    def smooth_display(self, disp: Any): ...
    def render(self, size: Any, focus: bool = ...): ...

def calculate_bargraph_display(bardata: Any, top: Any, bar_widths: Any, maxrow: Any): ...

class GraphVScale(Widget):
    def __init__(self, labels: Any, top: Any) -> None: ...
    pos: Any = ...
    txt: Any = ...
    top: Any = ...
    def set_scale(self, labels: Any, top: Any) -> None: ...
    def selectable(self): ...
    def render(self, size: Any, focus: bool = ...): ...

def scale_bar_values(bar: Any, top: Any, maxrow: Any): ...

class ProgressBar(Widget):
    eighths: str = ...
    text_align: Any = ...
    normal: Any = ...
    complete: Any = ...
    satt: Any = ...
    def __init__(self, normal: Any, complete: Any, current: int = ..., done: int = ..., satt: Optional[Any] = ...) -> None: ...
    def set_completion(self, current: Any) -> None: ...
    current: Any = ...
    done: Any = ...
    def rows(self, size: Any, focus: bool = ...): ...
    def get_text(self): ...
    def render(self, size: Any, focus: bool = ...): ...

class PythonLogo(Widget):
    def __init__(self) -> None: ...
    def pack(self, size: Optional[Any] = ..., focus: bool = ...): ...
    def render(self, size: Any, focus: bool = ...): ...
