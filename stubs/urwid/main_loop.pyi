from ._async_kw_event_loop import TrioEventLoop as TrioEventLoop
from twisted.internet.abstract import FileDescriptor
from typing import Any, Optional
from urwid.compat import PYTHON3 as PYTHON3

PIPE_BUFFER_READ_SIZE: int

class ExitMainLoop(Exception): ...
class CantUseExternalLoop(Exception): ...

class MainLoop:
    handle_mouse: Any = ...
    pop_ups: Any = ...
    screen: Any = ...
    screen_size: Any = ...
    event_loop: Any = ...
    def __init__(self, widget: Any, palette: Any = ..., screen: Optional[Any] = ..., handle_mouse: bool = ..., input_filter: Optional[Any] = ..., unhandled_input: Optional[Any] = ..., event_loop: Optional[Any] = ..., pop_ups: bool = ...) -> None: ...
    widget: Any = ...
    def set_alarm_in(self, sec: Any, callback: Any, user_data: Optional[Any] = ...): ...
    def set_alarm_at(self, tm: Any, callback: Any, user_data: Optional[Any] = ...): ...
    def remove_alarm(self, handle: Any): ...
    def watch_pipe(self, callback: Any): ...
    def remove_watch_pipe(self, write_fd: Any): ...
    def watch_file(self, fd: Any, callback: Any): ...
    def remove_watch_file(self, handle: Any): ...
    def run(self) -> None: ...
    idle_handle: Any = ...
    def start(self): ...
    def stop(self) -> None: ...
    def process_input(self, keys: Any): ...
    def input_filter(self, keys: Any, raw: Any): ...
    def unhandled_input(self, input: Any): ...
    def entering_idle(self) -> None: ...
    def draw_screen(self) -> None: ...

class EventLoop:
    def alarm(self, seconds: Any, callback: Any) -> None: ...
    def enter_idle(self, callback: Any) -> None: ...
    def remove_alarm(self, handle: Any) -> None: ...
    def remove_enter_idle(self, handle: Any) -> None: ...
    def remove_watch_file(self, handle: Any) -> None: ...
    def run(self) -> None: ...
    def watch_file(self, fd: Any, callback: Any) -> None: ...
    def set_signal_handler(self, signum: Any, handler: Any): ...

class SelectEventLoop(EventLoop):
    def __init__(self) -> None: ...
    def alarm(self, seconds: Any, callback: Any): ...
    def remove_alarm(self, handle: Any): ...
    def watch_file(self, fd: Any, callback: Any): ...
    def remove_watch_file(self, handle: Any): ...
    def enter_idle(self, callback: Any): ...
    def remove_enter_idle(self, handle: Any): ...
    def run(self) -> None: ...

class GLibEventLoop(EventLoop):
    GLib: Any = ...
    def __init__(self) -> None: ...
    def alarm(self, seconds: Any, callback: Any): ...
    def set_signal_handler(self, signum: Any, handler: Any): ...
    def remove_alarm(self, handle: Any): ...
    def watch_file(self, fd: Any, callback: Any): ...
    def remove_watch_file(self, handle: Any): ...
    def enter_idle(self, callback: Any): ...
    def remove_enter_idle(self, handle: Any): ...
    def run(self) -> None: ...
    def handle_exit(self, f: Any): ...

class TornadoEventLoop(EventLoop):
    class PollProxy:
        def __init__(self, poll_obj: Any, idle_map: Any) -> None: ...
        def __getattr__(self, name: Any): ...
        def poll(self, timeout: Any): ...
    def __init__(self, ioloop: Optional[Any] = ...) -> None: ...
    def alarm(self, secs: Any, callback: Any): ...
    def remove_alarm(self, handle: Any): ...
    def watch_file(self, fd: Any, callback: Any): ...
    def remove_watch_file(self, handle: Any): ...
    def enter_idle(self, callback: Any): ...
    def remove_enter_idle(self, handle: Any): ...
    def handle_exit(self, func: Any): ...
    def run(self) -> None: ...
FileDescriptor = object

class TwistedInputDescriptor(FileDescriptor):
    cb: Any = ...
    def __init__(self, reactor: Any, fd: Any, cb: Any) -> None: ...
    def fileno(self): ...
    def doRead(self): ...

class TwistedEventLoop(EventLoop):
    reactor: Any = ...
    manage_reactor: Any = ...
    def __init__(self, reactor: Optional[Any] = ..., manage_reactor: bool = ...) -> None: ...
    def alarm(self, seconds: Any, callback: Any): ...
    def remove_alarm(self, handle: Any): ...
    def watch_file(self, fd: Any, callback: Any): ...
    def remove_watch_file(self, handle: Any): ...
    def enter_idle(self, callback: Any): ...
    def remove_enter_idle(self, handle: Any): ...
    def run(self) -> None: ...
    def handle_exit(self, f: Any, enable_idle: bool = ...): ...

class AsyncioEventLoop(EventLoop):
    def __init__(self, **kwargs: Any) -> None: ...
    def alarm(self, seconds: Any, callback: Any): ...
    def remove_alarm(self, handle: Any): ...
    def watch_file(self, fd: Any, callback: Any): ...
    def remove_watch_file(self, handle: Any): ...
    def enter_idle(self, callback: Any): ...
    def remove_enter_idle(self, handle: Any): ...
    def run(self) -> None: ...
