from typing import Any, Optional
from urwid.display_common import BaseScreen, RealTerminal

class Screen(BaseScreen, RealTerminal):
    colors: int = ...
    has_underline: bool = ...
    prev_input_resize: int = ...
    screen_buf: Any = ...
    maxrow: Any = ...
    gpm_mev: Any = ...
    gpm_event_pending: bool = ...
    last_bstate: int = ...
    term: Any = ...
    fg_bright_is_bold: Any = ...
    bg_bright_is_blink: Any = ...
    back_color_erase: Any = ...
    signal_handler_setter: Any = ...
    def __init__(self, input: Any = ..., output: Any = ...) -> None: ...
    max_wait: Any = ...
    complete_wait: Any = ...
    resize_wait: Any = ...
    def set_input_timeouts(self, max_wait: Optional[Any] = ..., complete_wait: float = ..., resize_wait: float = ...) -> None: ...
    def signal_init(self) -> None: ...
    def signal_restore(self) -> None: ...
    def set_mouse_tracking(self, enable: bool = ...) -> None: ...
    def write(self, data: Any) -> None: ...
    def flush(self) -> None: ...
    def get_input(self, raw_keys: bool = ...): ...
    def get_input_descriptors(self): ...
    def unhook_event_loop(self, event_loop: Any) -> None: ...
    def hook_event_loop(self, event_loop: Any, callback: Any): ...
    def get_available_raw_input(self): ...
    def parse_input(self, event_loop: Any, callback: Any, codes: Any, wait_for_more: bool = ...): ...
    def get_cols_rows(self): ...
    def draw_screen(self, maxres: Any, r: Any): ...
    setup_G1: bool = ...
    def clear(self) -> None: ...
    def set_terminal_properties(self, colors: Optional[Any] = ..., bright_is_bold: Optional[Any] = ..., has_underline: Optional[Any] = ...) -> None: ...
    def reset_default_terminal_palette(self): ...
    def modify_terminal_palette(self, entries: Any) -> None: ...
    AttrSpec: Any = ...
