from typing import Any

str_util: Any
calc_text_pos: Any
calc_width: Any
is_wide_char: Any
move_next_char: Any
move_prev_char: Any
within_double_byte: Any

def detect_encoding(): ...

detected_encoding: Any

def set_encoding(encoding: Any) -> None: ...
def get_encoding_mode(): ...
def apply_target_encoding(s: Any): ...
def supports_unicode(): ...
def calc_trim_text(text: Any, start_offs: Any, end_offs: Any, start_col: Any, end_col: Any): ...
def trim_text_attr_cs(text: Any, attr: Any, cs: Any, start_col: Any, end_col: Any): ...
def rle_get_at(rle: Any, pos: Any): ...
def rle_subseg(rle: Any, start: Any, end: Any): ...
def rle_len(rle: Any): ...
def rle_prepend_modify(rle: Any, a_r: Any) -> None: ...
def rle_append_modify(rle: Any, a_r: Any) -> None: ...
def rle_join_modify(rle: Any, rle2: Any) -> None: ...
def rle_product(rle1: Any, rle2: Any): ...
def rle_factor(rle: Any): ...

class TagMarkupException(Exception): ...

def decompose_tagmarkup(tm: Any): ...
def is_mouse_event(ev: Any): ...
def is_mouse_press(ev: Any): ...

class MetaSuper(type):
    def __init__(cls, name: Any, bases: Any, d: Any) -> None: ...

def int_scale(val: Any, val_range: Any, out_range: Any): ...

class StoppingContext:
    def __init__(self, wrapped: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exc_info: Any) -> None: ...
