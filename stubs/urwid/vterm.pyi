from typing import Any, Optional
from urwid.canvas import Canvas
from urwid.widget import Widget

EOF: Any
ESC: Any
KEY_TRANSLATIONS: Any
KEY_TRANSLATIONS_DECCKM: Any
CSI_COMMANDS: Any
CHARSET_DEFAULT: int
CHARSET_UTF8: int

class TermModes:
    def __init__(self) -> None: ...
    display_ctrl: bool = ...
    insert: bool = ...
    lfnl: bool = ...
    keys_decckm: bool = ...
    reverse_video: bool = ...
    constrain_scrolling: bool = ...
    autowrap: bool = ...
    visible_cursor: bool = ...
    main_charset: Any = ...
    def reset(self) -> None: ...

class TermCharset:
    MAPPING: Any = ...
    def __init__(self) -> None: ...
    def define(self, g: Any, charset: Any) -> None: ...
    active: Any = ...
    current: Any = ...
    def activate(self, g: Any) -> None: ...
    def set_sgr_ibmpc(self) -> None: ...
    def reset_sgr_ibmpc(self) -> None: ...
    def apply_mapping(self, char: Any): ...

class TermScroller(list):
    SCROLLBACK_LINES: int = ...
    def trunc(self) -> None: ...
    def append(self, obj: Any) -> None: ...
    def insert(self, idx: Any, obj: Any) -> None: ...
    def extend(self, seq: Any) -> None: ...

class TermCanvas(Canvas):
    cacheable: bool = ...
    widget: Any = ...
    modes: Any = ...
    scrollback_buffer: Any = ...
    scrolling_up: int = ...
    utf8_eat_bytes: Any = ...
    utf8_buffer: Any = ...
    def __init__(self, width: Any, height: Any, widget: Any) -> None: ...
    term_cursor: Any = ...
    cursor: Any = ...
    def set_term_cursor(self, x: Optional[Any] = ..., y: Optional[Any] = ...) -> None: ...
    scrollregion_start: int = ...
    scrollregion_end: Any = ...
    def reset_scroll(self) -> None: ...
    def scroll_buffer(self, up: bool = ..., reset: bool = ..., lines: Optional[Any] = ...) -> None: ...
    escbuf: Any = ...
    within_escape: bool = ...
    parsestate: int = ...
    attrspec: Any = ...
    charset: Any = ...
    saved_cursor: Any = ...
    saved_attrs: Any = ...
    is_rotten_cursor: bool = ...
    def reset(self) -> None: ...
    tabstops: Any = ...
    def init_tabstops(self, extend: bool = ...) -> None: ...
    def set_tabstop(self, x: Optional[Any] = ..., remove: bool = ..., clear: bool = ...) -> None: ...
    def is_tabstop(self, x: Optional[Any] = ...): ...
    def empty_line(self, char: Any = ...): ...
    def empty_char(self, char: Any = ...): ...
    def addstr(self, data: Any) -> None: ...
    width: Any = ...
    height: Any = ...
    def resize(self, width: Any, height: Any) -> None: ...
    def set_g01(self, char: Any, mod: Any) -> None: ...
    def parse_csi(self, char: Any) -> None: ...
    def parse_noncsi(self, char: Any, mod: Optional[Any] = ...) -> None: ...
    def parse_osc(self, buf: Any) -> None: ...
    def parse_escape(self, char: Any) -> None: ...
    def leave_escape(self) -> None: ...
    def get_utf8_len(self, bytenum: Any): ...
    def addbyte(self, byte: Any) -> None: ...
    def process_char(self, char: Any) -> None: ...
    def set_char(self, char: Any, x: Optional[Any] = ..., y: Optional[Any] = ...) -> None: ...
    def constrain_coords(self, x: Any, y: Any, ignore_scrolling: bool = ...): ...
    def linefeed(self, reverse: bool = ...) -> None: ...
    def carriage_return(self) -> None: ...
    def newline(self) -> None: ...
    def move_cursor(self, x: Any, y: Any, relative_x: bool = ..., relative_y: bool = ..., relative: bool = ...) -> None: ...
    def push_char(self, char: Any, x: Any, y: Any) -> None: ...
    def push_cursor(self, char: Optional[Any] = ...) -> None: ...
    def save_cursor(self, with_attrs: bool = ...) -> None: ...
    def restore_cursor(self, with_attrs: bool = ...) -> None: ...
    def tab(self, tabstop: int = ...) -> None: ...
    def scroll(self, reverse: bool = ...) -> None: ...
    def decaln(self) -> None: ...
    def blank_line(self, row: Any) -> None: ...
    def insert_chars(self, position: Optional[Any] = ..., chars: int = ..., char: Optional[Any] = ...) -> None: ...
    def remove_chars(self, position: Optional[Any] = ..., chars: int = ...) -> None: ...
    def insert_lines(self, row: Optional[Any] = ..., lines: int = ...) -> None: ...
    def remove_lines(self, row: Optional[Any] = ..., lines: int = ...) -> None: ...
    def erase(self, start: Any, end: Any) -> None: ...
    def sgi_to_attrspec(self, attrs: Any, fg: Any, bg: Any, attributes: Any): ...
    def csi_set_attr(self, attrs: Any) -> None: ...
    def reverse_attrspec(self, attrspec: Any, undo: bool = ...): ...
    def reverse_video(self, undo: bool = ...) -> None: ...
    def set_mode(self, mode: Any, flag: Any, qmark: Any, reset: Any) -> None: ...
    def csi_set_modes(self, modes: Any, qmark: Any, reset: bool = ...) -> None: ...
    def csi_set_scroll(self, top: int = ..., bottom: int = ...) -> None: ...
    def csi_clear_tabstop(self, mode: int = ...) -> None: ...
    def csi_get_device_attributes(self, qmark: Any) -> None: ...
    def csi_status_report(self, mode: Any) -> None: ...
    def csi_erase_line(self, mode: Any) -> None: ...
    def csi_erase_display(self, mode: Any) -> None: ...
    def csi_set_keyboard_leds(self, mode: int = ...) -> None: ...
    term: Any = ...
    def clear(self, cursor: Optional[Any] = ...) -> None: ...
    def cols(self): ...
    def rows(self): ...
    def content(self, trim_left: int = ..., trim_right: int = ..., cols: Optional[Any] = ..., rows: Optional[Any] = ..., attr_map: Optional[Any] = ...) -> None: ...
    def content_delta(self, other: Any): ...

class Terminal(Widget):
    signals: Any = ...
    escape_sequence: str = ...
    env: Any = ...
    command: Any = ...
    encoding: Any = ...
    keygrab: bool = ...
    last_key: Any = ...
    response_buffer: Any = ...
    term_modes: Any = ...
    main_loop: Any = ...
    master: Any = ...
    pid: Any = ...
    width: Any = ...
    height: Any = ...
    term: Any = ...
    has_focus: bool = ...
    terminated: bool = ...
    def __init__(self, command: Any, env: Optional[Any] = ..., main_loop: Optional[Any] = ..., escape_sequence: Optional[Any] = ..., encoding: str = ...) -> None: ...
    def spawn(self) -> None: ...
    def terminate(self) -> None: ...
    def beep(self) -> None: ...
    def leds(self, which: Any) -> None: ...
    def respond(self, string: Any) -> None: ...
    def flush_responses(self) -> None: ...
    def set_termsize(self, width: Any, height: Any) -> None: ...
    def touch_term(self, width: Any, height: Any) -> None: ...
    def set_title(self, title: Any) -> None: ...
    old_tios: Any = ...
    def change_focus(self, has_focus: Any) -> None: ...
    def render(self, size: Any, focus: bool = ...): ...
    def add_watch(self) -> None: ...
    def remove_watch(self) -> None: ...
    def selectable(self): ...
    def wait_and_feed(self, timeout: float = ...) -> None: ...
    def feed(self) -> None: ...
    def keypress(self, size: Any, key: Any): ...
