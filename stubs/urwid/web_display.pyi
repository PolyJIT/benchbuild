from typing import Any, Optional

ALARM_DELAY: int
POLL_CONNECT: int
MAX_COLS: int
MAX_ROWS: int
MAX_READ: int
BUF_SZ: int

class Screen:
    palette: Any = ...
    has_color: bool = ...
    def __init__(self) -> None: ...
    started: Any = ...
    def register_palette(self, l: Any) -> None: ...
    def register_palette_entry(self, name: Any, foreground: Any, background: Any, mono: Optional[Any] = ...) -> None: ...
    def set_mouse_tracking(self, enable: bool = ...) -> None: ...
    def tty_signal_keys(self, *args: Any, **vargs: Any) -> None: ...
    last_screen: Any = ...
    last_screen_width: int = ...
    update_method: Any = ...
    pipe_name: Any = ...
    input_fd: Any = ...
    input_tail: str = ...
    content_head: Any = ...
    def start(self): ...
    def stop(self) -> None: ...
    def set_input_timeouts(self, *args: Any) -> None: ...
    def run_wrapper(self, fn: Any): ...
    def draw_screen(self, size: Any, r: Any) -> None: ...
    def clear(self) -> None: ...
    def get_cols_rows(self): ...
    def get_input(self, raw_keys: bool = ...): ...

def code_span(s: Any, fg: Any, bg: Any, cursor: int = ...): ...
def html_escape(text: Any): ...
def is_web_request(): ...
def handle_short_request(): ...

class _Preferences:
    app_name: str = ...
    pipe_dir: str = ...
    allow_polling: bool = ...
    max_clients: int = ...

def set_preferences(app_name: Any, pipe_dir: str = ..., allow_polling: bool = ..., max_clients: int = ...) -> None: ...

class ErrorLog:
    errfile: Any = ...
    def __init__(self, errfile: Any) -> None: ...
    def write(self, err: Any) -> None: ...

def daemonize(errfile: Any) -> None: ...
