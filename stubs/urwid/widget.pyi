from typing import Any, Optional
from urwid import signals
from urwid.util import MetaSuper

FLOW: str
BOX: str
FIXED: str
LEFT: str
RIGHT: str
CENTER: str
TOP: str
MIDDLE: str
BOTTOM: str
SPACE: str
ANY: str
CLIP: str
ELLIPSIS: str
PACK: str
GIVEN: str
RELATIVE: str
RELATIVE_100: Any
WEIGHT: str

class WidgetMeta(MetaSuper, signals.MetaSignals):
    def __init__(cls, name: Any, bases: Any, d: Any) -> None: ...

class WidgetError(Exception): ...

def validate_size(widget: Any, size: Any, canv: Any) -> None: ...
def update_wrapper(new_fn: Any, fn: Any) -> None: ...
def cache_widget_render(cls): ...
def nocache_widget_render(cls): ...
def nocache_widget_render_instance(self): ...
def cache_widget_rows(cls): ...

class Widget:
    def selectable(self): ...
    def sizing(self): ...
    def pack(self, size: Any, focus: bool = ...): ...
    base_widget: Any = ...
    focus: Any = ...
    focus_position: Any = ...

class FlowWidget(Widget):
    def rows(self, size: Any, focus: bool = ...) -> None: ...
    def render(self, size: Any, focus: bool = ...) -> None: ...

class BoxWidget(Widget):
    def render(self, size: Any, focus: bool = ...) -> None: ...

def fixed_size(size: Any) -> None: ...

class FixedWidget(Widget):
    def render(self, size: Any, focus: bool = ...) -> None: ...
    def pack(self, size: Optional[Any] = ..., focus: bool = ...) -> None: ...

class Divider(Widget):
    ignore_focus: bool = ...
    div_char: Any = ...
    top: Any = ...
    bottom: Any = ...
    def __init__(self, div_char: str = ..., top: int = ..., bottom: int = ...) -> None: ...
    def rows(self, size: Any, focus: bool = ...): ...
    def render(self, size: Any, focus: bool = ...): ...

class SolidFill(BoxWidget):
    ignore_focus: bool = ...
    fill_char: Any = ...
    def __init__(self, fill_char: str = ...) -> None: ...
    def render(self, size: Any, focus: bool = ...): ...

class TextError(Exception): ...

class Text(Widget):
    ignore_focus: bool = ...
    def __init__(self, markup: Any, align: Any = ..., wrap: Any = ..., layout: Optional[Any] = ...) -> None: ...
    def set_text(self, markup: Any) -> None: ...
    def get_text(self): ...
    text: Any = ...
    attrib: Any = ...
    def set_align_mode(self, mode: Any) -> None: ...
    def set_wrap_mode(self, mode: Any) -> None: ...
    def set_layout(self, align: Any, wrap: Any, layout: Optional[Any] = ...) -> None: ...
    align: Any = ...
    wrap: Any = ...
    layout: Any = ...
    def render(self, size: Any, focus: bool = ...): ...
    def rows(self, size: Any, focus: bool = ...): ...
    def get_line_translation(self, maxcol: Any, ta: Optional[Any] = ...): ...
    def pack(self, size: Optional[Any] = ..., focus: bool = ...): ...

class EditError(TextError): ...

class Edit(Text):
    ignore_focus: bool = ...
    signals: Any = ...
    def valid_char(self, ch: Any): ...
    multiline: Any = ...
    allow_tab: Any = ...
    def __init__(self, caption: str = ..., edit_text: str = ..., multiline: bool = ..., align: Any = ..., wrap: Any = ..., allow_tab: bool = ..., edit_pos: Optional[Any] = ..., layout: Optional[Any] = ..., mask: Optional[Any] = ...) -> None: ...
    def get_text(self): ...
    def set_text(self, markup: Any) -> None: ...
    def get_pref_col(self, size: Any): ...
    def update_text(self) -> None: ...
    def set_caption(self, caption: Any) -> None: ...
    caption: Any = ...
    highlight: Any = ...
    pref_col_maxcol: Any = ...
    def set_edit_pos(self, pos: Any) -> None: ...
    edit_pos: Any = ...
    def set_mask(self, mask: Any) -> None: ...
    def set_edit_text(self, text: Any) -> None: ...
    def get_edit_text(self): ...
    edit_text: Any = ...
    def insert_text(self, text: Any) -> None: ...
    def insert_text_result(self, text: Any): ...
    def keypress(self, size: Any, key: Any): ...
    def move_cursor_to_coords(self, size: Any, x: Any, y: Any): ...
    def mouse_event(self, size: Any, event: Any, button: Any, x: Any, y: Any, focus: Any): ...
    def render(self, size: Any, focus: bool = ...): ...
    def get_line_translation(self, maxcol: Any, ta: Optional[Any] = ...): ...
    def get_cursor_coords(self, size: Any): ...
    def position_coords(self, maxcol: Any, pos: Any): ...

class IntEdit(Edit):
    def valid_char(self, ch: Any): ...
    def __init__(self, caption: str = ..., default: Optional[Any] = ...) -> None: ...
    def keypress(self, size: Any, key: Any): ...
    def value(self): ...

def delegate_to_widget_mixin(attribute_name: Any): ...

class WidgetWrapError(Exception): ...

class WidgetWrap(Widget):
    def __init__(self, w: Any) -> None: ...
    w: Any = ...
