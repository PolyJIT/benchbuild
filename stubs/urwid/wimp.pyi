from typing import Any, Optional
from urwid.decoration import WidgetDecoration
from urwid.signals import disconnect_signal as disconnect_signal
from urwid.widget import Text, WidgetWrap

class SelectableIcon(Text):
    ignore_focus: bool = ...
    def __init__(self, text: Any, cursor_position: int = ...) -> None: ...
    def render(self, size: Any, focus: bool = ...): ...
    def get_cursor_coords(self, size: Any): ...
    def keypress(self, size: Any, key: Any): ...

class CheckBoxError(Exception): ...

class CheckBox(WidgetWrap):
    def sizing(self): ...
    states: Any = ...
    reserve_columns: int = ...
    signals: Any = ...
    has_mixed: Any = ...
    def __init__(self, label: Any, state: bool = ..., has_mixed: bool = ..., on_state_change: Optional[Any] = ..., user_data: Optional[Any] = ..., checked_symbol: Optional[Any] = ...) -> None: ...
    def set_label(self, label: Any) -> None: ...
    def get_label(self): ...
    label: Any = ...
    def set_state(self, state: Any, do_callback: bool = ...) -> None: ...
    def get_state(self): ...
    state: Any = ...
    def keypress(self, size: Any, key: Any): ...
    def toggle_state(self) -> None: ...
    def mouse_event(self, size: Any, event: Any, button: Any, x: Any, y: Any, focus: Any): ...

class RadioButton(CheckBox):
    states: Any = ...
    reserve_columns: int = ...
    group: Any = ...
    def __init__(self, group: Any, label: Any, state: str = ..., on_state_change: Optional[Any] = ..., user_data: Optional[Any] = ...) -> None: ...
    def set_state(self, state: Any, do_callback: bool = ...) -> None: ...
    def toggle_state(self) -> None: ...

class Button(WidgetWrap):
    def sizing(self): ...
    button_left: Any = ...
    button_right: Any = ...
    signals: Any = ...
    def __init__(self, label: Any, on_press: Optional[Any] = ..., user_data: Optional[Any] = ...) -> None: ...
    def set_label(self, label: Any) -> None: ...
    def get_label(self): ...
    label: Any = ...
    def keypress(self, size: Any, key: Any): ...
    def mouse_event(self, size: Any, event: Any, button: Any, x: Any, y: Any, focus: Any): ...

class PopUpLauncher(WidgetDecoration):
    def __init__(self, original_widget: Any) -> None: ...
    def create_pop_up(self) -> None: ...
    def get_pop_up_parameters(self) -> None: ...
    def open_pop_up(self) -> None: ...
    def close_pop_up(self) -> None: ...
    def render(self, size: Any, focus: bool = ...): ...

class PopUpTarget(WidgetDecoration):
    def __init__(self, original_widget: Any) -> None: ...
    def render(self, size: Any, focus: bool = ...): ...
    def get_cursor_coords(self, size: Any): ...
    def get_pref_col(self, size: Any): ...
    def keypress(self, size: Any, key: Any): ...
    def move_cursor_to_coords(self, size: Any, x: Any, y: Any): ...
    def mouse_event(self, size: Any, event: Any, button: Any, x: Any, y: Any, focus: Any): ...
    def pack(self, size: Optional[Any] = ..., focus: bool = ...): ...
